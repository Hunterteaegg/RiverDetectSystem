
RiverDetectSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000379c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080038a8  080038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d8  080039d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080039d8  080039d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d8  080039d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  08003a50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003a50  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cad2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e69  00000000  00000000  0002cb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  0002f630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a0d  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c631  00000000  00000000  00048bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b6fc  00000000  00000000  000551de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e08da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c40  00000000  00000000  000e0930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003890 	.word	0x08003890

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003890 	.word	0x08003890

0800014c <__aeabi_dmul>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000152:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015a:	bf1d      	ittte	ne
 800015c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000160:	ea94 0f0c 	teqne	r4, ip
 8000164:	ea95 0f0c 	teqne	r5, ip
 8000168:	f000 f8de 	bleq	8000328 <__aeabi_dmul+0x1dc>
 800016c:	442c      	add	r4, r5
 800016e:	ea81 0603 	eor.w	r6, r1, r3
 8000172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800017e:	bf18      	it	ne
 8000180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800018c:	d038      	beq.n	8000200 <__aeabi_dmul+0xb4>
 800018e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000192:	f04f 0500 	mov.w	r5, #0
 8000196:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800019e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a2:	f04f 0600 	mov.w	r6, #0
 80001a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001aa:	f09c 0f00 	teq	ip, #0
 80001ae:	bf18      	it	ne
 80001b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c0:	d204      	bcs.n	80001cc <__aeabi_dmul+0x80>
 80001c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001c6:	416d      	adcs	r5, r5
 80001c8:	eb46 0606 	adc.w	r6, r6, r6
 80001cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e4:	bf88      	it	hi
 80001e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ea:	d81e      	bhi.n	800022a <__aeabi_dmul+0xde>
 80001ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f0:	bf08      	it	eq
 80001f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001f6:	f150 0000 	adcs.w	r0, r0, #0
 80001fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000204:	ea46 0101 	orr.w	r1, r6, r1
 8000208:	ea40 0002 	orr.w	r0, r0, r2
 800020c:	ea81 0103 	eor.w	r1, r1, r3
 8000210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000214:	bfc2      	ittt	gt
 8000216:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800021e:	bd70      	popgt	{r4, r5, r6, pc}
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f04f 0e00 	mov.w	lr, #0
 8000228:	3c01      	subs	r4, #1
 800022a:	f300 80ab 	bgt.w	8000384 <__aeabi_dmul+0x238>
 800022e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000232:	bfde      	ittt	le
 8000234:	2000      	movle	r0, #0
 8000236:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023a:	bd70      	pople	{r4, r5, r6, pc}
 800023c:	f1c4 0400 	rsb	r4, r4, #0
 8000240:	3c20      	subs	r4, #32
 8000242:	da35      	bge.n	80002b0 <__aeabi_dmul+0x164>
 8000244:	340c      	adds	r4, #12
 8000246:	dc1b      	bgt.n	8000280 <__aeabi_dmul+0x134>
 8000248:	f104 0414 	add.w	r4, r4, #20
 800024c:	f1c4 0520 	rsb	r5, r4, #32
 8000250:	fa00 f305 	lsl.w	r3, r0, r5
 8000254:	fa20 f004 	lsr.w	r0, r0, r4
 8000258:	fa01 f205 	lsl.w	r2, r1, r5
 800025c:	ea40 0002 	orr.w	r0, r0, r2
 8000260:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000264:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800026c:	fa21 f604 	lsr.w	r6, r1, r4
 8000270:	eb42 0106 	adc.w	r1, r2, r6
 8000274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000278:	bf08      	it	eq
 800027a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f1c4 040c 	rsb	r4, r4, #12
 8000284:	f1c4 0520 	rsb	r5, r4, #32
 8000288:	fa00 f304 	lsl.w	r3, r0, r4
 800028c:	fa20 f005 	lsr.w	r0, r0, r5
 8000290:	fa01 f204 	lsl.w	r2, r1, r4
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a8:	bf08      	it	eq
 80002aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f205 	lsl.w	r2, r0, r5
 80002b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002bc:	fa20 f304 	lsr.w	r3, r0, r4
 80002c0:	fa01 f205 	lsl.w	r2, r1, r5
 80002c4:	ea43 0302 	orr.w	r3, r3, r2
 80002c8:	fa21 f004 	lsr.w	r0, r1, r4
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	fa21 f204 	lsr.w	r2, r1, r4
 80002d4:	ea20 0002 	bic.w	r0, r0, r2
 80002d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e0:	bf08      	it	eq
 80002e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f094 0f00 	teq	r4, #0
 80002ec:	d10f      	bne.n	800030e <__aeabi_dmul+0x1c2>
 80002ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f2:	0040      	lsls	r0, r0, #1
 80002f4:	eb41 0101 	adc.w	r1, r1, r1
 80002f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002fc:	bf08      	it	eq
 80002fe:	3c01      	subeq	r4, #1
 8000300:	d0f7      	beq.n	80002f2 <__aeabi_dmul+0x1a6>
 8000302:	ea41 0106 	orr.w	r1, r1, r6
 8000306:	f095 0f00 	teq	r5, #0
 800030a:	bf18      	it	ne
 800030c:	4770      	bxne	lr
 800030e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	eb43 0303 	adc.w	r3, r3, r3
 8000318:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800031c:	bf08      	it	eq
 800031e:	3d01      	subeq	r5, #1
 8000320:	d0f7      	beq.n	8000312 <__aeabi_dmul+0x1c6>
 8000322:	ea43 0306 	orr.w	r3, r3, r6
 8000326:	4770      	bx	lr
 8000328:	ea94 0f0c 	teq	r4, ip
 800032c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000330:	bf18      	it	ne
 8000332:	ea95 0f0c 	teqne	r5, ip
 8000336:	d00c      	beq.n	8000352 <__aeabi_dmul+0x206>
 8000338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800033c:	bf18      	it	ne
 800033e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000342:	d1d1      	bne.n	80002e8 <__aeabi_dmul+0x19c>
 8000344:	ea81 0103 	eor.w	r1, r1, r3
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	f04f 0000 	mov.w	r0, #0
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000356:	bf06      	itte	eq
 8000358:	4610      	moveq	r0, r2
 800035a:	4619      	moveq	r1, r3
 800035c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000360:	d019      	beq.n	8000396 <__aeabi_dmul+0x24a>
 8000362:	ea94 0f0c 	teq	r4, ip
 8000366:	d102      	bne.n	800036e <__aeabi_dmul+0x222>
 8000368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800036c:	d113      	bne.n	8000396 <__aeabi_dmul+0x24a>
 800036e:	ea95 0f0c 	teq	r5, ip
 8000372:	d105      	bne.n	8000380 <__aeabi_dmul+0x234>
 8000374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000378:	bf1c      	itt	ne
 800037a:	4610      	movne	r0, r2
 800037c:	4619      	movne	r1, r3
 800037e:	d10a      	bne.n	8000396 <__aeabi_dmul+0x24a>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800038c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800039e:	bd70      	pop	{r4, r5, r6, pc}

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_d2iz>:
 8000718:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800071c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000720:	d215      	bcs.n	800074e <__aeabi_d2iz+0x36>
 8000722:	d511      	bpl.n	8000748 <__aeabi_d2iz+0x30>
 8000724:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000728:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800072c:	d912      	bls.n	8000754 <__aeabi_d2iz+0x3c>
 800072e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000736:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	bf18      	it	ne
 8000744:	4240      	negne	r0, r0
 8000746:	4770      	bx	lr
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	4770      	bx	lr
 800074e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000752:	d105      	bne.n	8000760 <__aeabi_d2iz+0x48>
 8000754:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000758:	bf08      	it	eq
 800075a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800075e:	4770      	bx	lr
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop

08000768 <__io_putchar>:
#else
#define	PUTCHAR_PROTOTYPE int fputc(int ch, FILE* f)
#endif

PUTCHAR_PROTOTYPE
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8000770:	1d39      	adds	r1, r7, #4
 8000772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000776:	2201      	movs	r2, #1
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <__io_putchar+0x20>)
 800077a:	f001 ff16 	bl	80025aa <HAL_UART_Transmit>
	return ch;
 800077e:	687b      	ldr	r3, [r7, #4]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000098 	.word	0x20000098

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f000 fce9 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f82f 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 f917 	bl	80009cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800079e:	f000 f8c1 	bl	8000924 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007a2:	f000 f8e9 	bl	8000978 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007a6:	f000 f86d 	bl	8000884 <MX_TIM1_Init>
  /*
  esp8266_init();
  esp8266_connectAP(WIFI_SSID, WIFI_PASSWD);
  esp8266_connectServer("TCP", "192.168.137.1", 3456);
  */
  DS18B20_t ds18b20_handle = {
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <main+0x60>)
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	80bb      	strh	r3, [r7, #4]
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <main+0x64>)
 80007c2:	60bb      	str	r3, [r7, #8]
  	  			  .GPIOx = w1_bus_GPIO_Port,
  	  			  .tim = &htim1,
  	  	  };


  DS18B20_init(&ds18b20_handle);
 80007c4:	463b      	mov	r3, r7
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fb01 	bl	8000dce <DS18B20_init>
  int temperature = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  temperature = DS18B20_convert(&ds18b20_handle);
 80007d0:	463b      	mov	r3, r7
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fb08 	bl	8000de8 <DS18B20_convert>
 80007d8:	6178      	str	r0, [r7, #20]

	  printf("Temp: %d\r\n", temperature);
 80007da:	6979      	ldr	r1, [r7, #20]
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <main+0x68>)
 80007de:	f002 f881 	bl	80028e4 <iprintf>
	  HAL_Delay(1000);
 80007e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e6:	f000 fd21 	bl	800122c <HAL_Delay>
	  temperature = DS18B20_convert(&ds18b20_handle);
 80007ea:	e7f1      	b.n	80007d0 <main+0x44>
 80007ec:	40010800 	.word	0x40010800
 80007f0:	200000d8 	.word	0x200000d8
 80007f4:	080038a8 	.word	0x080038a8

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b090      	sub	sp, #64	; 0x40
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	2228      	movs	r2, #40	; 0x28
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f002 f864 	bl	80028d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081a:	2301      	movs	r3, #1
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000822:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	2302      	movs	r3, #2
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000836:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800083a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0318 	add.w	r3, r7, #24
 8000840:	4618      	mov	r0, r3
 8000842:	f000 ff97 	bl	8001774 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800084c:	f000 f8f4 	bl	8000a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fa02 	bl	8001c74 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000876:	f000 f8df 	bl	8000a38 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3740      	adds	r7, #64	; 0x40
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_TIM1_Init+0x98>)
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <MX_TIM1_Init+0x9c>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_TIM1_Init+0x98>)
 80008a8:	2247      	movs	r2, #71	; 0x47
 80008aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_TIM1_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_TIM1_Init+0x98>)
 80008b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_TIM1_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_TIM1_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_TIM1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008cc:	4813      	ldr	r0, [pc, #76]	; (800091c <MX_TIM1_Init+0x98>)
 80008ce:	f001 fb6b 	bl	8001fa8 <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80008d8:	f000 f8ae 	bl	8000a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4619      	mov	r1, r3
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_TIM1_Init+0x98>)
 80008ea:	f001 fbf7 	bl	80020dc <HAL_TIM_ConfigClockSource>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008f4:	f000 f8a0 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_TIM1_Init+0x98>)
 8000906:	f001 fda5 	bl	8002454 <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000910:	f000 f892 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000d8 	.word	0x200000d8
 8000920:	40012c00 	.word	0x40012c00

08000924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_USART1_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800095c:	f001 fdd8 	bl	8002510 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 f867 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000098 	.word	0x20000098
 8000974:	40013800 	.word	0x40013800

08000978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MX_USART2_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 80009b0:	f001 fdae 	bl	8002510 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f000 f83d 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000120 	.word	0x20000120
 80009c8:	40004400 	.word	0x40004400

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_GPIO_Init+0x64>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MX_GPIO_Init+0x64>)
 80009e6:	f043 0320 	orr.w	r3, r3, #32
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_GPIO_Init+0x64>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0320 	and.w	r3, r3, #32
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <MX_GPIO_Init+0x64>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <MX_GPIO_Init+0x64>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_GPIO_Init+0x64>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : w1_bus_Pin */
  GPIO_InitStruct.Pin = w1_bus_Pin;
 8000a10:	2301      	movs	r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(w1_bus_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	4619      	mov	r1, r3
 8000a22:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_GPIO_Init+0x68>)
 8000a24:	f000 fd0a 	bl	800143c <HAL_GPIO_Init>

}
 8000a28:	bf00      	nop
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010800 	.word	0x40010800

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_MspInit+0x60>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_MspInit+0x60>)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <HAL_TIM_Base_MspInit+0x34>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10b      	bne.n	8000ad2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac4:	6193      	str	r3, [r2, #24]
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	40012c00 	.word	0x40012c00
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0318 	add.w	r3, r7, #24
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a37      	ldr	r2, [pc, #220]	; (8000bdc <HAL_UART_MspInit+0xf8>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d132      	bne.n	8000b6a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b04:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <HAL_UART_MspInit+0xfc>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a35      	ldr	r2, [pc, #212]	; (8000be0 <HAL_UART_MspInit+0xfc>)
 8000b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <HAL_UART_MspInit+0xfc>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <HAL_UART_MspInit+0xfc>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <HAL_UART_MspInit+0xfc>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <HAL_UART_MspInit+0xfc>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin;
 8000b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LOG_TX_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0318 	add.w	r3, r7, #24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4826      	ldr	r0, [pc, #152]	; (8000be4 <HAL_UART_MspInit+0x100>)
 8000b4a:	f000 fc77 	bl	800143c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LOG_RX_Pin;
 8000b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LOG_RX_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	4619      	mov	r1, r3
 8000b62:	4820      	ldr	r0, [pc, #128]	; (8000be4 <HAL_UART_MspInit+0x100>)
 8000b64:	f000 fc6a 	bl	800143c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b68:	e034      	b.n	8000bd4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <HAL_UART_MspInit+0x104>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d12f      	bne.n	8000bd4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_UART_MspInit+0xfc>)
 8000b76:	69db      	ldr	r3, [r3, #28]
 8000b78:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <HAL_UART_MspInit+0xfc>)
 8000b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7e:	61d3      	str	r3, [r2, #28]
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0xfc>)
 8000b82:	69db      	ldr	r3, [r3, #28]
 8000b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <HAL_UART_MspInit+0xfc>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <HAL_UART_MspInit+0xfc>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_UART_MspInit+0xfc>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480b      	ldr	r0, [pc, #44]	; (8000be4 <HAL_UART_MspInit+0x100>)
 8000bb8:	f000 fc40 	bl	800143c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ESP_RX_Pin;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <HAL_UART_MspInit+0x100>)
 8000bd0:	f000 fc34 	bl	800143c <HAL_GPIO_Init>
}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40013800 	.word	0x40013800
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40010800 	.word	0x40010800
 8000be8:	40004400 	.word	0x40004400

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c32:	f000 fadf 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	e00a      	b.n	8000c62 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c4c:	f3af 8000 	nop.w
 8000c50:	4601      	mov	r1, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	60ba      	str	r2, [r7, #8]
 8000c58:	b2ca      	uxtb	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	dbf0      	blt.n	8000c4c <_read+0x12>
	}

return len;
 8000c6a:	687b      	ldr	r3, [r7, #4]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	e009      	b.n	8000c9a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	1c5a      	adds	r2, r3, #1
 8000c8a:	60ba      	str	r2, [r7, #8]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fd6a 	bl	8000768 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	3301      	adds	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	dbf1      	blt.n	8000c86 <_write+0x12>
	}
	return len;
 8000ca2:	687b      	ldr	r3, [r7, #4]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_close>:

int _close(int file)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	return -1;
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr

08000cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <_isatty>:

int _isatty(int file)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	return 1;
 8000ce8:	2301      	movs	r3, #1
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
	return 0;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d14:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d3c:	f001 fda0 	bl	8002880 <__errno>
 8000d40:	4603      	mov	r3, r0
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20005000 	.word	0x20005000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	2000008c 	.word	0x2000008c
 8000d74:	20000178 	.word	0x20000178

08000d78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d84:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d86:	e003      	b.n	8000d90 <LoopCopyDataInit>

08000d88 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d8a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d8c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d8e:	3104      	adds	r1, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d90:	480a      	ldr	r0, [pc, #40]	; (8000dbc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d94:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d96:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d98:	d3f6      	bcc.n	8000d88 <CopyDataInit>
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d9c:	e002      	b.n	8000da4 <LoopFillZerobss>

08000d9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000da0:	f842 3b04 	str.w	r3, [r2], #4

08000da4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000da6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000da8:	d3f9      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000daa:	f7ff ffe5 	bl	8000d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f001 fd6d 	bl	800288c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db2:	f7ff fceb 	bl	800078c <main>
  bx lr
 8000db6:	4770      	bx	lr
  ldr r3, =_sidata
 8000db8:	080039e0 	.word	0x080039e0
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000dc0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000dc4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000dc8:	20000174 	.word	0x20000174

08000dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_2_IRQHandler>

08000dce <DS18B20_init>:

#include "ds18b20.h"
#include <stdio.h>

void DS18B20_init(DS18B20_t* handle)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(handle->tim);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 f934 	bl	8002048 <HAL_TIM_Base_Start>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <DS18B20_convert>:

int DS18B20_convert(DS18B20_t* handle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	int temperature = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
	int res;
	uint8_t TL, TH;

	res = DS18B20_reset(handle);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f8d1 	bl	8000f9c <DS18B20_reset>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60fb      	str	r3, [r7, #12]
	printf("first res is %d\r\n", res);
 8000dfe:	68f9      	ldr	r1, [r7, #12]
 8000e00:	482d      	ldr	r0, [pc, #180]	; (8000eb8 <DS18B20_convert+0xd0>)
 8000e02:	f001 fd6f 	bl	80028e4 <iprintf>
	DS18B20_writeByte(handle, 0xCC);
 8000e06:	21cc      	movs	r1, #204	; 0xcc
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 f96d 	bl	80010e8 <DS18B20_writeByte>
	DS18B20_writeByte(handle, 0x44);
 8000e0e:	2144      	movs	r1, #68	; 0x44
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f969 	bl	80010e8 <DS18B20_writeByte>
	res = DS18B20_reset(handle);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 f8c0 	bl	8000f9c <DS18B20_reset>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60fb      	str	r3, [r7, #12]
	printf("second res is %d\r\n", res);
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	4826      	ldr	r0, [pc, #152]	; (8000ebc <DS18B20_convert+0xd4>)
 8000e24:	f001 fd5e 	bl	80028e4 <iprintf>
	DS18B20_writeByte(handle, 0xCC);
 8000e28:	21cc      	movs	r1, #204	; 0xcc
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f95c 	bl	80010e8 <DS18B20_writeByte>
	DS18B20_writeByte(handle, 0xBE);
 8000e30:	21be      	movs	r1, #190	; 0xbe
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f958 	bl	80010e8 <DS18B20_writeByte>
	TL = DS18B20_readByte(handle);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f000 f973 	bl	8001124 <DS18B20_readByte>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	75fb      	strb	r3, [r7, #23]
	printf("TL = %d\r\n", TL);
 8000e42:	7dfb      	ldrb	r3, [r7, #23]
 8000e44:	4619      	mov	r1, r3
 8000e46:	481e      	ldr	r0, [pc, #120]	; (8000ec0 <DS18B20_convert+0xd8>)
 8000e48:	f001 fd4c 	bl	80028e4 <iprintf>
	TH = DS18B20_readByte(handle);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f969 	bl	8001124 <DS18B20_readByte>
 8000e52:	4603      	mov	r3, r0
 8000e54:	75bb      	strb	r3, [r7, #22]
	printf("TH = %d\r\n", TH);
 8000e56:	7dbb      	ldrb	r3, [r7, #22]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481a      	ldr	r0, [pc, #104]	; (8000ec4 <DS18B20_convert+0xdc>)
 8000e5c:	f001 fd42 	bl	80028e4 <iprintf>

	if(TH > 0x70)
 8000e60:	7dbb      	ldrb	r3, [r7, #22]
 8000e62:	2b70      	cmp	r3, #112	; 0x70
 8000e64:	d905      	bls.n	8000e72 <DS18B20_convert+0x8a>
	{
		  TH = ~TH;
 8000e66:	7dbb      	ldrb	r3, [r7, #22]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	75bb      	strb	r3, [r7, #22]
		  TL = ~TL;
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	75fb      	strb	r3, [r7, #23]
	}

	temperature = TH;
 8000e72:	7dbb      	ldrb	r3, [r7, #22]
 8000e74:	613b      	str	r3, [r7, #16]
    temperature <<= 8;
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	613b      	str	r3, [r7, #16]
	temperature += TL;
 8000e7c:	7dfb      	ldrb	r3, [r7, #23]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4413      	add	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
	temperature = temperature *10000 * 0.0625;
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e8a:	fb02 f303 	mul.w	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fbd8 	bl	8000644 <__aeabi_i2d>
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <DS18B20_convert+0xe0>)
 8000e9a:	f7ff f957 	bl	800014c <__aeabi_dmul>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f7ff fc37 	bl	8000718 <__aeabi_d2iz>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	613b      	str	r3, [r7, #16]

	return temperature;
 8000eae:	693b      	ldr	r3, [r7, #16]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	080038b4 	.word	0x080038b4
 8000ebc:	080038c8 	.word	0x080038c8
 8000ec0:	080038dc 	.word	0x080038dc
 8000ec4:	080038e8 	.word	0x080038e8
 8000ec8:	3fb00000 	.word	0x3fb00000

08000ecc <DS18B20_delay>:

inline void DS18B20_delay(DS18B20_t* handle, uint16_t timeout_us)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
	handle->tim->Instance->CNT = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
	while(handle->tim->Instance->CNT <= timeout_us);
 8000ee2:	bf00      	nop
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d9f8      	bls.n	8000ee4 <DS18B20_delay+0x18>
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <DS18B20_setHigh>:

inline void DS18B20_setHigh(DS18B20_t* handle)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
	handle->GPIOx->BSRR = handle->GPIO_Pin;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	889a      	ldrh	r2, [r3, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	611a      	str	r2, [r3, #16]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <DS18B20_setLow>:

inline void DS18B20_setLow(DS18B20_t* handle)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	handle->GPIOx->BSRR = handle->GPIO_Pin << 16;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	889b      	ldrh	r3, [r3, #4]
 8000f26:	041a      	lsls	r2, r3, #16
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	611a      	str	r2, [r3, #16]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <DS18B20_input>:

inline void DS18B20_input(DS18B20_t* handle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_init;
	gpio_init.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
	gpio_init.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
	gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	617b      	str	r3, [r7, #20]
	gpio_init.Pin = handle->GPIO_Pin;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	889b      	ldrh	r3, [r3, #4]
 8000f50:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(handle->GPIOx, &gpio_init);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f107 0208 	add.w	r2, r7, #8
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fa6d 	bl	800143c <HAL_GPIO_Init>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <DS18B20_output>:

inline void DS18B20_output(DS18B20_t* handle)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_init;
	gpio_init.Mode = GPIO_MODE_OUTPUT_OD;
 8000f72:	2311      	movs	r3, #17
 8000f74:	60fb      	str	r3, [r7, #12]
	gpio_init.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
	gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	617b      	str	r3, [r7, #20]
	gpio_init.Pin = handle->GPIO_Pin;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	889b      	ldrh	r3, [r3, #4]
 8000f82:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(handle->GPIOx, &gpio_init);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f107 0208 	add.w	r2, r7, #8
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fa54 	bl	800143c <HAL_GPIO_Init>
}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <DS18B20_reset>:

inline uint8_t DS18B20_reset(DS18B20_t* handle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	uint8_t res = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]

	printf("entry reset\r\n");
 8000fa8:	4817      	ldr	r0, [pc, #92]	; (8001008 <DS18B20_reset+0x6c>)
 8000faa:	f001 fd21 	bl	80029f0 <puts>
	DS18B20_output(handle);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffdb 	bl	8000f6a <DS18B20_output>
	DS18B20_setLow(handle);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ffb0 	bl	8000f1a <DS18B20_setLow>
	printf("reset: set output\r\n");
 8000fba:	4814      	ldr	r0, [pc, #80]	; (800100c <DS18B20_reset+0x70>)
 8000fbc:	f001 fd18 	bl	80029f0 <puts>
	DS18B20_delay(handle, 480);
 8000fc0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff81 	bl	8000ecc <DS18B20_delay>
	DS18B20_delay(handle, 20);
 8000fca:	2114      	movs	r1, #20
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff7d 	bl	8000ecc <DS18B20_delay>
	DS18B20_input(handle);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffb0 	bl	8000f38 <DS18B20_input>
	DS18B20_setHigh(handle);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff90 	bl	8000efe <DS18B20_setHigh>
	DS18B20_delay(handle, 70);
 8000fde:	2146      	movs	r1, #70	; 0x46
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff73 	bl	8000ecc <DS18B20_delay>
	while(HAL_GPIO_ReadPin(handle->GPIOx, handle->GPIO_Pin));
 8000fe6:	bf00      	nop
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	889b      	ldrh	r3, [r3, #4]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	f000 fba6 	bl	8001744 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f4      	bne.n	8000fe8 <DS18B20_reset+0x4c>

	return res;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	080038f4 	.word	0x080038f4
 800100c:	08003904 	.word	0x08003904

08001010 <DS18B20_writeBit>:

inline void DS18B20_writeBit(DS18B20_t* handle, uint8_t bit)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	70fb      	strb	r3, [r7, #3]
	if(bit)
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d017      	beq.n	8001052 <DS18B20_writeBit+0x42>
	{
		DS18B20_setLow(handle);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff79 	bl	8000f1a <DS18B20_setLow>
		DS18B20_output(handle);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff9e 	bl	8000f6a <DS18B20_output>
		DS18B20_delay(handle, 10);
 800102e:	210a      	movs	r1, #10
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff4b 	bl	8000ecc <DS18B20_delay>

		DS18B20_setHigh(handle);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff61 	bl	8000efe <DS18B20_setHigh>
		DS18B20_input(handle);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff7b 	bl	8000f38 <DS18B20_input>

		DS18B20_delay(handle, 55);
 8001042:	2137      	movs	r1, #55	; 0x37
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff41 	bl	8000ecc <DS18B20_delay>
		DS18B20_input(handle);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff74 	bl	8000f38 <DS18B20_input>
		DS18B20_input(handle);

		DS18B20_delay(handle, 5);
		DS18B20_input(handle);
	}
}
 8001050:	e016      	b.n	8001080 <DS18B20_writeBit+0x70>
		DS18B20_setLow(handle);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff61 	bl	8000f1a <DS18B20_setLow>
		DS18B20_output(handle);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff86 	bl	8000f6a <DS18B20_output>
		DS18B20_delay(handle, 65);
 800105e:	2141      	movs	r1, #65	; 0x41
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff33 	bl	8000ecc <DS18B20_delay>
		DS18B20_setHigh(handle);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ff49 	bl	8000efe <DS18B20_setHigh>
		DS18B20_input(handle);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff63 	bl	8000f38 <DS18B20_input>
		DS18B20_delay(handle, 5);
 8001072:	2105      	movs	r1, #5
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff29 	bl	8000ecc <DS18B20_delay>
		DS18B20_input(handle);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff5c 	bl	8000f38 <DS18B20_input>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <DS18B20_readBit>:

inline uint8_t DS18B20_readBit(DS18B20_t* handle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]

	DS18B20_setLow(handle);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff40 	bl	8000f1a <DS18B20_setLow>
	DS18B20_output(handle);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff65 	bl	8000f6a <DS18B20_output>
	DS18B20_delay(handle, 2);
 80010a0:	2102      	movs	r1, #2
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff12 	bl	8000ecc <DS18B20_delay>

	DS18B20_setHigh(handle);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff28 	bl	8000efe <DS18B20_setHigh>
	DS18B20_input(handle);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff42 	bl	8000f38 <DS18B20_input>
	DS18B20_delay(handle, 10);
 80010b4:	210a      	movs	r1, #10
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff08 	bl	8000ecc <DS18B20_delay>

	if(HAL_GPIO_ReadPin(handle->GPIOx, handle->GPIO_Pin))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	889b      	ldrh	r3, [r3, #4]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4610      	mov	r0, r2
 80010c8:	f000 fb3c 	bl	8001744 <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <DS18B20_readBit+0x4e>
	{
		bit = 1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
	}

	DS18B20_delay(handle, 50);
 80010d6:	2132      	movs	r1, #50	; 0x32
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff fef7 	bl	8000ecc <DS18B20_delay>

	return bit;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <DS18B20_writeByte>:

void DS18B20_writeByte(DS18B20_t* handle, uint8_t byte)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80010f4:	2308      	movs	r3, #8
 80010f6:	73fb      	strb	r3, [r7, #15]

	while(i--)
 80010f8:	e00a      	b.n	8001110 <DS18B20_writeByte+0x28>
	{
		DS18B20_writeBit(handle, byte & 0x01);
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4619      	mov	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff83 	bl	8001010 <DS18B20_writeBit>
		byte >>= 1;
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	085b      	lsrs	r3, r3, #1
 800110e:	70fb      	strb	r3, [r7, #3]
	while(i--)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	1e5a      	subs	r2, r3, #1
 8001114:	73fa      	strb	r2, [r7, #15]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1ef      	bne.n	80010fa <DS18B20_writeByte+0x12>
	}
}
 800111a:	bf00      	nop
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <DS18B20_readByte>:

uint8_t DS18B20_readByte(DS18B20_t* handle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 800112c:	2308      	movs	r3, #8
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	2300      	movs	r3, #0
 8001132:	73bb      	strb	r3, [r7, #14]
	while(i--)
 8001134:	e00d      	b.n	8001152 <DS18B20_readByte+0x2e>
	{
		byte >>= 1;
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	085b      	lsrs	r3, r3, #1
 800113a:	73bb      	strb	r3, [r7, #14]
		byte |= (DS18B20_readBit(handle) << 7);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ffa3 	bl	8001088 <DS18B20_readBit>
 8001142:	4603      	mov	r3, r0
 8001144:	01db      	lsls	r3, r3, #7
 8001146:	b25a      	sxtb	r2, r3
 8001148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800114c:	4313      	orrs	r3, r2
 800114e:	b25b      	sxtb	r3, r3
 8001150:	73bb      	strb	r3, [r7, #14]
	while(i--)
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	1e5a      	subs	r2, r3, #1
 8001156:	73fa      	strb	r2, [r7, #15]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1ec      	bne.n	8001136 <DS18B20_readByte+0x12>
	}

	return  byte;
 800115c:	7bbb      	ldrb	r3, [r7, #14]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_Init+0x28>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_Init+0x28>)
 8001172:	f043 0310 	orr.w	r3, r3, #16
 8001176:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f92b 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	2000      	movs	r0, #0
 8001180:	f000 f808 	bl	8001194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001184:	f7ff fc5e 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x54>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x58>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f935 	bl	8001422 <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f90b 	bl	80013ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_InitTick+0x5c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000004 	.word	0x20000004

080011f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a03      	ldr	r2, [pc, #12]	; (8001214 <HAL_IncTick+0x20>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	20000008 	.word	0x20000008
 8001214:	20000160 	.word	0x20000160

08001218 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <HAL_GetTick+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	20000160 	.word	0x20000160

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fff0 	bl	8001218 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffe0 	bl	8001218 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	; (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7ff ff90 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff49 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013fc:	f7ff ff5e 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f7ff ff90 	bl	800132c <NVIC_EncodePriority>
 800140c:	4602      	mov	r2, r0
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff5f 	bl	80012d8 <__NVIC_SetPriority>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffb0 	bl	8001390 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b08b      	sub	sp, #44	; 0x2c
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144e:	e169      	b.n	8001724 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001450:	2201      	movs	r2, #1
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8158 	bne.w	800171e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a9a      	ldr	r2, [pc, #616]	; (80016dc <HAL_GPIO_Init+0x2a0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d05e      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001478:	4a98      	ldr	r2, [pc, #608]	; (80016dc <HAL_GPIO_Init+0x2a0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d875      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 800147e:	4a98      	ldr	r2, [pc, #608]	; (80016e0 <HAL_GPIO_Init+0x2a4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d058      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001484:	4a96      	ldr	r2, [pc, #600]	; (80016e0 <HAL_GPIO_Init+0x2a4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d86f      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 800148a:	4a96      	ldr	r2, [pc, #600]	; (80016e4 <HAL_GPIO_Init+0x2a8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d052      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001490:	4a94      	ldr	r2, [pc, #592]	; (80016e4 <HAL_GPIO_Init+0x2a8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d869      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 8001496:	4a94      	ldr	r2, [pc, #592]	; (80016e8 <HAL_GPIO_Init+0x2ac>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d04c      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 800149c:	4a92      	ldr	r2, [pc, #584]	; (80016e8 <HAL_GPIO_Init+0x2ac>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d863      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014a2:	4a92      	ldr	r2, [pc, #584]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d046      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 80014a8:	4a90      	ldr	r2, [pc, #576]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d85d      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014ae:	2b12      	cmp	r3, #18
 80014b0:	d82a      	bhi.n	8001508 <HAL_GPIO_Init+0xcc>
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d859      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014b6:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <HAL_GPIO_Init+0x80>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	08001537 	.word	0x08001537
 80014c0:	08001511 	.word	0x08001511
 80014c4:	08001523 	.word	0x08001523
 80014c8:	08001565 	.word	0x08001565
 80014cc:	0800156b 	.word	0x0800156b
 80014d0:	0800156b 	.word	0x0800156b
 80014d4:	0800156b 	.word	0x0800156b
 80014d8:	0800156b 	.word	0x0800156b
 80014dc:	0800156b 	.word	0x0800156b
 80014e0:	0800156b 	.word	0x0800156b
 80014e4:	0800156b 	.word	0x0800156b
 80014e8:	0800156b 	.word	0x0800156b
 80014ec:	0800156b 	.word	0x0800156b
 80014f0:	0800156b 	.word	0x0800156b
 80014f4:	0800156b 	.word	0x0800156b
 80014f8:	0800156b 	.word	0x0800156b
 80014fc:	0800156b 	.word	0x0800156b
 8001500:	08001519 	.word	0x08001519
 8001504:	0800152d 	.word	0x0800152d
 8001508:	4a79      	ldr	r2, [pc, #484]	; (80016f0 <HAL_GPIO_Init+0x2b4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d013      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800150e:	e02c      	b.n	800156a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e029      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	3304      	adds	r3, #4
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e024      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	3308      	adds	r3, #8
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e01f      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	330c      	adds	r3, #12
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e01a      	b.n	800156c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800153e:	2304      	movs	r3, #4
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e013      	b.n	800156c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d105      	bne.n	8001558 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800154c:	2308      	movs	r3, #8
 800154e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	611a      	str	r2, [r3, #16]
          break;
 8001556:	e009      	b.n	800156c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001558:	2308      	movs	r3, #8
 800155a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	615a      	str	r2, [r3, #20]
          break;
 8001562:	e003      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x130>
          break;
 800156a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2bff      	cmp	r3, #255	; 0xff
 8001570:	d801      	bhi.n	8001576 <HAL_GPIO_Init+0x13a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	e001      	b.n	800157a <HAL_GPIO_Init+0x13e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3304      	adds	r3, #4
 800157a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2bff      	cmp	r3, #255	; 0xff
 8001580:	d802      	bhi.n	8001588 <HAL_GPIO_Init+0x14c>
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	e002      	b.n	800158e <HAL_GPIO_Init+0x152>
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	3b08      	subs	r3, #8
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	210f      	movs	r1, #15
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	401a      	ands	r2, r3
 80015a0:	6a39      	ldr	r1, [r7, #32]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	431a      	orrs	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 80b1 	beq.w	800171e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015bc:	4b4d      	ldr	r3, [pc, #308]	; (80016f4 <HAL_GPIO_Init+0x2b8>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a4c      	ldr	r2, [pc, #304]	; (80016f4 <HAL_GPIO_Init+0x2b8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <HAL_GPIO_Init+0x2b8>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015d4:	4a48      	ldr	r2, [pc, #288]	; (80016f8 <HAL_GPIO_Init+0x2bc>)
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3302      	adds	r3, #2
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	220f      	movs	r2, #15
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a40      	ldr	r2, [pc, #256]	; (80016fc <HAL_GPIO_Init+0x2c0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d013      	beq.n	8001628 <HAL_GPIO_Init+0x1ec>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3f      	ldr	r2, [pc, #252]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d00d      	beq.n	8001624 <HAL_GPIO_Init+0x1e8>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3e      	ldr	r2, [pc, #248]	; (8001704 <HAL_GPIO_Init+0x2c8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d007      	beq.n	8001620 <HAL_GPIO_Init+0x1e4>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a3d      	ldr	r2, [pc, #244]	; (8001708 <HAL_GPIO_Init+0x2cc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d101      	bne.n	800161c <HAL_GPIO_Init+0x1e0>
 8001618:	2303      	movs	r3, #3
 800161a:	e006      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 800161c:	2304      	movs	r3, #4
 800161e:	e004      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001620:	2302      	movs	r3, #2
 8001622:	e002      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001628:	2300      	movs	r3, #0
 800162a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162c:	f002 0203 	and.w	r2, r2, #3
 8001630:	0092      	lsls	r2, r2, #2
 8001632:	4093      	lsls	r3, r2
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800163a:	492f      	ldr	r1, [pc, #188]	; (80016f8 <HAL_GPIO_Init+0x2bc>)
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	492c      	ldr	r1, [pc, #176]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	43db      	mvns	r3, r3
 800166a:	4928      	ldr	r1, [pc, #160]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800166c:	4013      	ands	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d006      	beq.n	800168a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800167c:	4b23      	ldr	r3, [pc, #140]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4922      	ldr	r1, [pc, #136]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	43db      	mvns	r3, r3
 8001692:	491e      	ldr	r1, [pc, #120]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001694:	4013      	ands	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	4918      	ldr	r1, [pc, #96]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4914      	ldr	r1, [pc, #80]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016bc:	4013      	ands	r3, r2
 80016be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d021      	beq.n	8001710 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	490e      	ldr	r1, [pc, #56]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	60cb      	str	r3, [r1, #12]
 80016d8:	e021      	b.n	800171e <HAL_GPIO_Init+0x2e2>
 80016da:	bf00      	nop
 80016dc:	10320000 	.word	0x10320000
 80016e0:	10310000 	.word	0x10310000
 80016e4:	10220000 	.word	0x10220000
 80016e8:	10210000 	.word	0x10210000
 80016ec:	10120000 	.word	0x10120000
 80016f0:	10110000 	.word	0x10110000
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010000 	.word	0x40010000
 80016fc:	40010800 	.word	0x40010800
 8001700:	40010c00 	.word	0x40010c00
 8001704:	40011000 	.word	0x40011000
 8001708:	40011400 	.word	0x40011400
 800170c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_GPIO_Init+0x304>)
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	43db      	mvns	r3, r3
 8001718:	4909      	ldr	r1, [pc, #36]	; (8001740 <HAL_GPIO_Init+0x304>)
 800171a:	4013      	ands	r3, r2
 800171c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	3301      	adds	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	f47f ae8e 	bne.w	8001450 <HAL_GPIO_Init+0x14>
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	372c      	adds	r7, #44	; 0x2c
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e001      	b.n	8001766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
	...

08001774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e26c      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8087 	beq.w	80018a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001794:	4b92      	ldr	r3, [pc, #584]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b04      	cmp	r3, #4
 800179e:	d00c      	beq.n	80017ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a0:	4b8f      	ldr	r3, [pc, #572]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d112      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5e>
 80017ac:	4b8c      	ldr	r3, [pc, #560]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b8:	d10b      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ba:	4b89      	ldr	r3, [pc, #548]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d06c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x12c>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d168      	bne.n	80018a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e246      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x76>
 80017dc:	4b80      	ldr	r3, [pc, #512]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a7f      	ldr	r2, [pc, #508]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e02e      	b.n	8001848 <HAL_RCC_OscConfig+0xd4>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x98>
 80017f2:	4b7b      	ldr	r3, [pc, #492]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a7a      	ldr	r2, [pc, #488]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b78      	ldr	r3, [pc, #480]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a77      	ldr	r2, [pc, #476]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e01d      	b.n	8001848 <HAL_RCC_OscConfig+0xd4>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0xbc>
 8001816:	4b72      	ldr	r3, [pc, #456]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a71      	ldr	r2, [pc, #452]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b6f      	ldr	r3, [pc, #444]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a6e      	ldr	r2, [pc, #440]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0xd4>
 8001830:	4b6b      	ldr	r3, [pc, #428]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a6a      	ldr	r2, [pc, #424]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a67      	ldr	r2, [pc, #412]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001846:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fce2 	bl	8001218 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fcde 	bl	8001218 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e1fa      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0xe4>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff fcce 	bl	8001218 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fcca 	bl	8001218 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1e6      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x10c>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d063      	beq.n	8001976 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ae:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ba:	4b49      	ldr	r3, [pc, #292]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d11c      	bne.n	8001900 <HAL_RCC_OscConfig+0x18c>
 80018c6:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d116      	bne.n	8001900 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x176>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e1ba      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4939      	ldr	r1, [pc, #228]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	e03a      	b.n	8001976 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <HAL_RCC_OscConfig+0x270>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fc83 	bl	8001218 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fc7f 	bl	8001218 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e19b      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4927      	ldr	r1, [pc, #156]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
 8001948:	e015      	b.n	8001976 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_RCC_OscConfig+0x270>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fc62 	bl	8001218 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff fc5e 	bl	8001218 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e17a      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d03a      	beq.n	80019f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d019      	beq.n	80019be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <HAL_RCC_OscConfig+0x274>)
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001990:	f7ff fc42 	bl	8001218 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff fc3e 	bl	8001218 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e15a      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019b6:	2001      	movs	r0, #1
 80019b8:	f000 fad8 	bl	8001f6c <RCC_Delay>
 80019bc:	e01c      	b.n	80019f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_RCC_OscConfig+0x274>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c4:	f7ff fc28 	bl	8001218 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ca:	e00f      	b.n	80019ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff fc24 	bl	8001218 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d908      	bls.n	80019ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e140      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	42420000 	.word	0x42420000
 80019e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ec:	4b9e      	ldr	r3, [pc, #632]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e9      	bne.n	80019cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a6 	beq.w	8001b52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0a:	4b97      	ldr	r3, [pc, #604]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10d      	bne.n	8001a32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b94      	ldr	r3, [pc, #592]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a93      	ldr	r2, [pc, #588]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b91      	ldr	r3, [pc, #580]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	4b8e      	ldr	r3, [pc, #568]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d118      	bne.n	8001a70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3e:	4b8b      	ldr	r3, [pc, #556]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a8a      	ldr	r2, [pc, #552]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fbe5 	bl	8001218 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7ff fbe1 	bl	8001218 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b64      	cmp	r3, #100	; 0x64
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0fd      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	4b81      	ldr	r3, [pc, #516]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x312>
 8001a78:	4b7b      	ldr	r3, [pc, #492]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a7a      	ldr	r2, [pc, #488]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6213      	str	r3, [r2, #32]
 8001a84:	e02d      	b.n	8001ae2 <HAL_RCC_OscConfig+0x36e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x334>
 8001a8e:	4b76      	ldr	r3, [pc, #472]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a75      	ldr	r2, [pc, #468]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6213      	str	r3, [r2, #32]
 8001a9a:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a72      	ldr	r2, [pc, #456]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	e01c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x36e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x356>
 8001ab0:	4b6d      	ldr	r3, [pc, #436]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4a6c      	ldr	r2, [pc, #432]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6213      	str	r3, [r2, #32]
 8001abc:	4b6a      	ldr	r3, [pc, #424]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4a69      	ldr	r2, [pc, #420]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6213      	str	r3, [r2, #32]
 8001ac8:	e00b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x36e>
 8001aca:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a66      	ldr	r2, [pc, #408]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6213      	str	r3, [r2, #32]
 8001ad6:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a63      	ldr	r2, [pc, #396]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d015      	beq.n	8001b16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aea:	f7ff fb95 	bl	8001218 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7ff fb91 	bl	8001218 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e0ab      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	4b57      	ldr	r3, [pc, #348]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ee      	beq.n	8001af2 <HAL_RCC_OscConfig+0x37e>
 8001b14:	e014      	b.n	8001b40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fb7f 	bl	8001218 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff fb7b 	bl	8001218 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e095      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1ee      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d105      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b46:	4b48      	ldr	r3, [pc, #288]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	4a47      	ldr	r2, [pc, #284]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8081 	beq.w	8001c5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b5c:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d061      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d146      	bne.n	8001bfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b70:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <HAL_RCC_OscConfig+0x4fc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff fb4f 	bl	8001218 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff fb4b 	bl	8001218 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e067      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b90:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba4:	d108      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ba6:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	492d      	ldr	r1, [pc, #180]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a19      	ldr	r1, [r3, #32]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	4927      	ldr	r1, [pc, #156]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <HAL_RCC_OscConfig+0x4fc>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fb1f 	bl	8001218 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff fb1b 	bl	8001218 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e037      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x46a>
 8001bfc:	e02f      	b.n	8001c5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <HAL_RCC_OscConfig+0x4fc>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fb08 	bl	8001218 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff fb04 	bl	8001218 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e020      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x498>
 8001c2a:	e018      	b.n	8001c5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e013      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40007000 	.word	0x40007000
 8001c70:	42420060 	.word	0x42420060

08001c74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0d0      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c88:	4b6a      	ldr	r3, [pc, #424]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d910      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 0207 	bic.w	r2, r3, #7
 8001c9e:	4965      	ldr	r1, [pc, #404]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b63      	ldr	r3, [pc, #396]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0b8      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d020      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd0:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce8:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4a52      	ldr	r2, [pc, #328]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf4:	4b50      	ldr	r3, [pc, #320]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	494d      	ldr	r1, [pc, #308]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d040      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d115      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e07f      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d32:	4b41      	ldr	r3, [pc, #260]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e073      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d42:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e06b      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d52:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f023 0203 	bic.w	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4936      	ldr	r1, [pc, #216]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d64:	f7ff fa58 	bl	8001218 <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6c:	f7ff fa54 	bl	8001218 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e053      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d82:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 020c 	and.w	r2, r3, #12
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d1eb      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d210      	bcs.n	8001dc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 0207 	bic.w	r2, r3, #7
 8001daa:	4922      	ldr	r1, [pc, #136]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e032      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4916      	ldr	r1, [pc, #88]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	490e      	ldr	r1, [pc, #56]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e02:	f000 f821 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8001e06:	4602      	mov	r2, r0
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	490a      	ldr	r1, [pc, #40]	; (8001e3c <HAL_RCC_ClockConfig+0x1c8>)
 8001e14:	5ccb      	ldrb	r3, [r1, r3]
 8001e16:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x1cc>)
 8001e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_ClockConfig+0x1d0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f9b6 	bl	8001194 <HAL_InitTick>

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40022000 	.word	0x40022000
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	08003928 	.word	0x08003928
 8001e40:	20000000 	.word	0x20000000
 8001e44:	20000004 	.word	0x20000004

08001e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e48:	b490      	push	{r4, r7}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e50:	1d3c      	adds	r4, r7, #4
 8001e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e58:	f240 2301 	movw	r3, #513	; 0x201
 8001e5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e72:	4b22      	ldr	r3, [pc, #136]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d002      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0x40>
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d003      	beq.n	8001e8e <HAL_RCC_GetSysClockFreq+0x46>
 8001e86:	e02d      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e8a:	623b      	str	r3, [r7, #32]
      break;
 8001e8c:	e02d      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	0c9b      	lsrs	r3, r3, #18
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ea0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eac:	4b13      	ldr	r3, [pc, #76]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0c5b      	lsrs	r3, r3, #17
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eba:	4413      	add	r3, r2
 8001ebc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ec0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec6:	fb02 f203 	mul.w	r2, r2, r3
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed2:	e004      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	623b      	str	r3, [r7, #32]
      break;
 8001ee2:	e002      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee6:	623b      	str	r3, [r7, #32]
      break;
 8001ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eea:	6a3b      	ldr	r3, [r7, #32]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc90      	pop	{r4, r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	08003918 	.word	0x08003918
 8001efc:	40021000 	.word	0x40021000
 8001f00:	007a1200 	.word	0x007a1200
 8001f04:	003d0900 	.word	0x003d0900

08001f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f0c:	4b02      	ldr	r3, [pc, #8]	; (8001f18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	20000000 	.word	0x20000000

08001f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f20:	f7ff fff2 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4903      	ldr	r1, [pc, #12]	; (8001f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	08003938 	.word	0x08003938

08001f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f48:	f7ff ffde 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	0adb      	lsrs	r3, r3, #11
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	4903      	ldr	r1, [pc, #12]	; (8001f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f5a:	5ccb      	ldrb	r3, [r1, r3]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08003938 	.word	0x08003938

08001f6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <RCC_Delay+0x34>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <RCC_Delay+0x38>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	0a5b      	lsrs	r3, r3, #9
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f88:	bf00      	nop
  }
  while (Delay --);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	60fa      	str	r2, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f9      	bne.n	8001f88 <RCC_Delay+0x1c>
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	10624dd3 	.word	0x10624dd3

08001fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e041      	b.n	800203e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fd6a 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f000 f93c 	bl	8002264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d001      	beq.n	8002060 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e032      	b.n	80020c6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <HAL_TIM_Base_Start+0x88>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00e      	beq.n	8002090 <HAL_TIM_Base_Start+0x48>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207a:	d009      	beq.n	8002090 <HAL_TIM_Base_Start+0x48>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <HAL_TIM_Base_Start+0x8c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_TIM_Base_Start+0x48>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <HAL_TIM_Base_Start+0x90>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d111      	bne.n	80020b4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d010      	beq.n	80020c4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b2:	e007      	b.n	80020c4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	40000400 	.word	0x40000400
 80020d8:	40000800 	.word	0x40000800

080020dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_TIM_ConfigClockSource+0x18>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e0b3      	b.n	800225c <HAL_TIM_ConfigClockSource+0x180>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002112:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800211a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212c:	d03e      	beq.n	80021ac <HAL_TIM_ConfigClockSource+0xd0>
 800212e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002132:	f200 8087 	bhi.w	8002244 <HAL_TIM_ConfigClockSource+0x168>
 8002136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213a:	f000 8085 	beq.w	8002248 <HAL_TIM_ConfigClockSource+0x16c>
 800213e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002142:	d87f      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 8002144:	2b70      	cmp	r3, #112	; 0x70
 8002146:	d01a      	beq.n	800217e <HAL_TIM_ConfigClockSource+0xa2>
 8002148:	2b70      	cmp	r3, #112	; 0x70
 800214a:	d87b      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 800214c:	2b60      	cmp	r3, #96	; 0x60
 800214e:	d050      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x116>
 8002150:	2b60      	cmp	r3, #96	; 0x60
 8002152:	d877      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 8002154:	2b50      	cmp	r3, #80	; 0x50
 8002156:	d03c      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0xf6>
 8002158:	2b50      	cmp	r3, #80	; 0x50
 800215a:	d873      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d058      	beq.n	8002212 <HAL_TIM_ConfigClockSource+0x136>
 8002160:	2b40      	cmp	r3, #64	; 0x40
 8002162:	d86f      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 8002164:	2b30      	cmp	r3, #48	; 0x30
 8002166:	d064      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x156>
 8002168:	2b30      	cmp	r3, #48	; 0x30
 800216a:	d86b      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 800216c:	2b20      	cmp	r3, #32
 800216e:	d060      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x156>
 8002170:	2b20      	cmp	r3, #32
 8002172:	d867      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 8002174:	2b00      	cmp	r3, #0
 8002176:	d05c      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x156>
 8002178:	2b10      	cmp	r3, #16
 800217a:	d05a      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800217c:	e062      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6899      	ldr	r1, [r3, #8]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f000 f942 	bl	8002416 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	609a      	str	r2, [r3, #8]
      break;
 80021aa:	e04e      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	6899      	ldr	r1, [r3, #8]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f000 f92b 	bl	8002416 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ce:	609a      	str	r2, [r3, #8]
      break;
 80021d0:	e03b      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6859      	ldr	r1, [r3, #4]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	461a      	mov	r2, r3
 80021e0:	f000 f8a2 	bl	8002328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2150      	movs	r1, #80	; 0x50
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f8f9 	bl	80023e2 <TIM_ITRx_SetConfig>
      break;
 80021f0:	e02b      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6859      	ldr	r1, [r3, #4]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	461a      	mov	r2, r3
 8002200:	f000 f8c0 	bl	8002384 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2160      	movs	r1, #96	; 0x60
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f8e9 	bl	80023e2 <TIM_ITRx_SetConfig>
      break;
 8002210:	e01b      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6859      	ldr	r1, [r3, #4]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	461a      	mov	r2, r3
 8002220:	f000 f882 	bl	8002328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2140      	movs	r1, #64	; 0x40
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f8d9 	bl	80023e2 <TIM_ITRx_SetConfig>
      break;
 8002230:	e00b      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f000 f8d0 	bl	80023e2 <TIM_ITRx_SetConfig>
        break;
 8002242:	e002      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002244:	bf00      	nop
 8002246:	e000      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002248:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a29      	ldr	r2, [pc, #164]	; (800231c <TIM_Base_SetConfig+0xb8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00b      	beq.n	8002294 <TIM_Base_SetConfig+0x30>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002282:	d007      	beq.n	8002294 <TIM_Base_SetConfig+0x30>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a26      	ldr	r2, [pc, #152]	; (8002320 <TIM_Base_SetConfig+0xbc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d003      	beq.n	8002294 <TIM_Base_SetConfig+0x30>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a25      	ldr	r2, [pc, #148]	; (8002324 <TIM_Base_SetConfig+0xc0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d108      	bne.n	80022a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1c      	ldr	r2, [pc, #112]	; (800231c <TIM_Base_SetConfig+0xb8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00b      	beq.n	80022c6 <TIM_Base_SetConfig+0x62>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b4:	d007      	beq.n	80022c6 <TIM_Base_SetConfig+0x62>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a19      	ldr	r2, [pc, #100]	; (8002320 <TIM_Base_SetConfig+0xbc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d003      	beq.n	80022c6 <TIM_Base_SetConfig+0x62>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a18      	ldr	r2, [pc, #96]	; (8002324 <TIM_Base_SetConfig+0xc0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d108      	bne.n	80022d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a07      	ldr	r2, [pc, #28]	; (800231c <TIM_Base_SetConfig+0xb8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d103      	bne.n	800230c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	615a      	str	r2, [r3, #20]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40000400 	.word	0x40000400
 8002324:	40000800 	.word	0x40000800

08002328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f023 0201 	bic.w	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f023 030a 	bic.w	r3, r3, #10
 8002364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	621a      	str	r2, [r3, #32]
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f023 0210 	bic.w	r2, r3, #16
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	031b      	lsls	r3, r3, #12
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	621a      	str	r2, [r3, #32]
}
 80023d8:	bf00      	nop
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	f043 0307 	orr.w	r3, r3, #7
 8002404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	609a      	str	r2, [r3, #8]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002416:	b480      	push	{r7}
 8002418:	b087      	sub	sp, #28
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002430:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	021a      	lsls	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	431a      	orrs	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	4313      	orrs	r3, r2
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	609a      	str	r2, [r3, #8]
}
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002468:	2302      	movs	r3, #2
 800246a:	e046      	b.n	80024fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a16      	ldr	r2, [pc, #88]	; (8002504 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00e      	beq.n	80024ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d009      	beq.n	80024ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a12      	ldr	r2, [pc, #72]	; (8002508 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d004      	beq.n	80024ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a10      	ldr	r2, [pc, #64]	; (800250c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10c      	bne.n	80024e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40012c00 	.word	0x40012c00
 8002508:	40000400 	.word	0x40000400
 800250c:	40000800 	.word	0x40000800

08002510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e03f      	b.n	80025a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe fad4 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2224      	movs	r2, #36	; 0x24
 8002540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f905 	bl	8002764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b08a      	sub	sp, #40	; 0x28
 80025ae:	af02      	add	r7, sp, #8
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	4613      	mov	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d17c      	bne.n	80026c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_UART_Transmit+0x2c>
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e075      	b.n	80026c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_UART_Transmit+0x3e>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e06e      	b.n	80026c6 <HAL_UART_Transmit+0x11c>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2221      	movs	r2, #33	; 0x21
 80025fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80025fe:	f7fe fe0b 	bl	8001218 <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	88fa      	ldrh	r2, [r7, #6]
 8002608:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	88fa      	ldrh	r2, [r7, #6]
 800260e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002618:	d108      	bne.n	800262c <HAL_UART_Transmit+0x82>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d104      	bne.n	800262c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	e003      	b.n	8002634 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800263c:	e02a      	b.n	8002694 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2200      	movs	r2, #0
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f840 	bl	80026ce <UART_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e036      	b.n	80026c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10b      	bne.n	8002676 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800266c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	3302      	adds	r3, #2
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	e007      	b.n	8002686 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	3301      	adds	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1cf      	bne.n	800263e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2200      	movs	r2, #0
 80026a6:	2140      	movs	r1, #64	; 0x40
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f810 	bl	80026ce <UART_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e006      	b.n	80026c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4613      	mov	r3, r2
 80026dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026de:	e02c      	b.n	800273a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e6:	d028      	beq.n	800273a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <UART_WaitOnFlagUntilTimeout+0x30>
 80026ee:	f7fe fd93 	bl	8001218 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d21d      	bcs.n	800273a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800270c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e00f      	b.n	800275a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4013      	ands	r3, r2
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	bf0c      	ite	eq
 800274a:	2301      	moveq	r3, #1
 800274c:	2300      	movne	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	429a      	cmp	r2, r3
 8002756:	d0c3      	beq.n	80026e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800279e:	f023 030c 	bic.w	r3, r3, #12
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <UART_SetConfig+0x114>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d103      	bne.n	80027d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027cc:	f7ff fbba 	bl	8001f44 <HAL_RCC_GetPCLK2Freq>
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	e002      	b.n	80027da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027d4:	f7ff fba2 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 80027d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	009a      	lsls	r2, r3, #2
 80027e4:	441a      	add	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	4a22      	ldr	r2, [pc, #136]	; (800287c <UART_SetConfig+0x118>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	0119      	lsls	r1, r3, #4
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	009a      	lsls	r2, r3, #2
 8002804:	441a      	add	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002810:	4b1a      	ldr	r3, [pc, #104]	; (800287c <UART_SetConfig+0x118>)
 8002812:	fba3 0302 	umull	r0, r3, r3, r2
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	2064      	movs	r0, #100	; 0x64
 800281a:	fb00 f303 	mul.w	r3, r0, r3
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	3332      	adds	r3, #50	; 0x32
 8002824:	4a15      	ldr	r2, [pc, #84]	; (800287c <UART_SetConfig+0x118>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002830:	4419      	add	r1, r3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009a      	lsls	r2, r3, #2
 800283c:	441a      	add	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	fbb2 f2f3 	udiv	r2, r2, r3
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <UART_SetConfig+0x118>)
 800284a:	fba3 0302 	umull	r0, r3, r3, r2
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2064      	movs	r0, #100	; 0x64
 8002852:	fb00 f303 	mul.w	r3, r0, r3
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	3332      	adds	r3, #50	; 0x32
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <UART_SetConfig+0x118>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	f003 020f 	and.w	r2, r3, #15
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	440a      	add	r2, r1
 800286e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40013800 	.word	0x40013800
 800287c:	51eb851f 	.word	0x51eb851f

08002880 <__errno>:
 8002880:	4b01      	ldr	r3, [pc, #4]	; (8002888 <__errno+0x8>)
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	2000000c 	.word	0x2000000c

0800288c <__libc_init_array>:
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	2600      	movs	r6, #0
 8002890:	4d0c      	ldr	r5, [pc, #48]	; (80028c4 <__libc_init_array+0x38>)
 8002892:	4c0d      	ldr	r4, [pc, #52]	; (80028c8 <__libc_init_array+0x3c>)
 8002894:	1b64      	subs	r4, r4, r5
 8002896:	10a4      	asrs	r4, r4, #2
 8002898:	42a6      	cmp	r6, r4
 800289a:	d109      	bne.n	80028b0 <__libc_init_array+0x24>
 800289c:	f000 fff8 	bl	8003890 <_init>
 80028a0:	2600      	movs	r6, #0
 80028a2:	4d0a      	ldr	r5, [pc, #40]	; (80028cc <__libc_init_array+0x40>)
 80028a4:	4c0a      	ldr	r4, [pc, #40]	; (80028d0 <__libc_init_array+0x44>)
 80028a6:	1b64      	subs	r4, r4, r5
 80028a8:	10a4      	asrs	r4, r4, #2
 80028aa:	42a6      	cmp	r6, r4
 80028ac:	d105      	bne.n	80028ba <__libc_init_array+0x2e>
 80028ae:	bd70      	pop	{r4, r5, r6, pc}
 80028b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b4:	4798      	blx	r3
 80028b6:	3601      	adds	r6, #1
 80028b8:	e7ee      	b.n	8002898 <__libc_init_array+0xc>
 80028ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80028be:	4798      	blx	r3
 80028c0:	3601      	adds	r6, #1
 80028c2:	e7f2      	b.n	80028aa <__libc_init_array+0x1e>
 80028c4:	080039d8 	.word	0x080039d8
 80028c8:	080039d8 	.word	0x080039d8
 80028cc:	080039d8 	.word	0x080039d8
 80028d0:	080039dc 	.word	0x080039dc

080028d4 <memset>:
 80028d4:	4603      	mov	r3, r0
 80028d6:	4402      	add	r2, r0
 80028d8:	4293      	cmp	r3, r2
 80028da:	d100      	bne.n	80028de <memset+0xa>
 80028dc:	4770      	bx	lr
 80028de:	f803 1b01 	strb.w	r1, [r3], #1
 80028e2:	e7f9      	b.n	80028d8 <memset+0x4>

080028e4 <iprintf>:
 80028e4:	b40f      	push	{r0, r1, r2, r3}
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <iprintf+0x2c>)
 80028e8:	b513      	push	{r0, r1, r4, lr}
 80028ea:	681c      	ldr	r4, [r3, #0]
 80028ec:	b124      	cbz	r4, 80028f8 <iprintf+0x14>
 80028ee:	69a3      	ldr	r3, [r4, #24]
 80028f0:	b913      	cbnz	r3, 80028f8 <iprintf+0x14>
 80028f2:	4620      	mov	r0, r4
 80028f4:	f000 fa5e 	bl	8002db4 <__sinit>
 80028f8:	ab05      	add	r3, sp, #20
 80028fa:	4620      	mov	r0, r4
 80028fc:	9a04      	ldr	r2, [sp, #16]
 80028fe:	68a1      	ldr	r1, [r4, #8]
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	f000 fc29 	bl	8003158 <_vfiprintf_r>
 8002906:	b002      	add	sp, #8
 8002908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800290c:	b004      	add	sp, #16
 800290e:	4770      	bx	lr
 8002910:	2000000c 	.word	0x2000000c

08002914 <_puts_r>:
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	460e      	mov	r6, r1
 8002918:	4605      	mov	r5, r0
 800291a:	b118      	cbz	r0, 8002924 <_puts_r+0x10>
 800291c:	6983      	ldr	r3, [r0, #24]
 800291e:	b90b      	cbnz	r3, 8002924 <_puts_r+0x10>
 8002920:	f000 fa48 	bl	8002db4 <__sinit>
 8002924:	69ab      	ldr	r3, [r5, #24]
 8002926:	68ac      	ldr	r4, [r5, #8]
 8002928:	b913      	cbnz	r3, 8002930 <_puts_r+0x1c>
 800292a:	4628      	mov	r0, r5
 800292c:	f000 fa42 	bl	8002db4 <__sinit>
 8002930:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <_puts_r+0xd0>)
 8002932:	429c      	cmp	r4, r3
 8002934:	d120      	bne.n	8002978 <_puts_r+0x64>
 8002936:	686c      	ldr	r4, [r5, #4]
 8002938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800293a:	07db      	lsls	r3, r3, #31
 800293c:	d405      	bmi.n	800294a <_puts_r+0x36>
 800293e:	89a3      	ldrh	r3, [r4, #12]
 8002940:	0598      	lsls	r0, r3, #22
 8002942:	d402      	bmi.n	800294a <_puts_r+0x36>
 8002944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002946:	f000 fad3 	bl	8002ef0 <__retarget_lock_acquire_recursive>
 800294a:	89a3      	ldrh	r3, [r4, #12]
 800294c:	0719      	lsls	r1, r3, #28
 800294e:	d51d      	bpl.n	800298c <_puts_r+0x78>
 8002950:	6923      	ldr	r3, [r4, #16]
 8002952:	b1db      	cbz	r3, 800298c <_puts_r+0x78>
 8002954:	3e01      	subs	r6, #1
 8002956:	68a3      	ldr	r3, [r4, #8]
 8002958:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800295c:	3b01      	subs	r3, #1
 800295e:	60a3      	str	r3, [r4, #8]
 8002960:	bb39      	cbnz	r1, 80029b2 <_puts_r+0x9e>
 8002962:	2b00      	cmp	r3, #0
 8002964:	da38      	bge.n	80029d8 <_puts_r+0xc4>
 8002966:	4622      	mov	r2, r4
 8002968:	210a      	movs	r1, #10
 800296a:	4628      	mov	r0, r5
 800296c:	f000 f848 	bl	8002a00 <__swbuf_r>
 8002970:	3001      	adds	r0, #1
 8002972:	d011      	beq.n	8002998 <_puts_r+0x84>
 8002974:	250a      	movs	r5, #10
 8002976:	e011      	b.n	800299c <_puts_r+0x88>
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <_puts_r+0xd4>)
 800297a:	429c      	cmp	r4, r3
 800297c:	d101      	bne.n	8002982 <_puts_r+0x6e>
 800297e:	68ac      	ldr	r4, [r5, #8]
 8002980:	e7da      	b.n	8002938 <_puts_r+0x24>
 8002982:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <_puts_r+0xd8>)
 8002984:	429c      	cmp	r4, r3
 8002986:	bf08      	it	eq
 8002988:	68ec      	ldreq	r4, [r5, #12]
 800298a:	e7d5      	b.n	8002938 <_puts_r+0x24>
 800298c:	4621      	mov	r1, r4
 800298e:	4628      	mov	r0, r5
 8002990:	f000 f888 	bl	8002aa4 <__swsetup_r>
 8002994:	2800      	cmp	r0, #0
 8002996:	d0dd      	beq.n	8002954 <_puts_r+0x40>
 8002998:	f04f 35ff 	mov.w	r5, #4294967295
 800299c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800299e:	07da      	lsls	r2, r3, #31
 80029a0:	d405      	bmi.n	80029ae <_puts_r+0x9a>
 80029a2:	89a3      	ldrh	r3, [r4, #12]
 80029a4:	059b      	lsls	r3, r3, #22
 80029a6:	d402      	bmi.n	80029ae <_puts_r+0x9a>
 80029a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029aa:	f000 faa2 	bl	8002ef2 <__retarget_lock_release_recursive>
 80029ae:	4628      	mov	r0, r5
 80029b0:	bd70      	pop	{r4, r5, r6, pc}
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da04      	bge.n	80029c0 <_puts_r+0xac>
 80029b6:	69a2      	ldr	r2, [r4, #24]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	dc06      	bgt.n	80029ca <_puts_r+0xb6>
 80029bc:	290a      	cmp	r1, #10
 80029be:	d004      	beq.n	80029ca <_puts_r+0xb6>
 80029c0:	6823      	ldr	r3, [r4, #0]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	6022      	str	r2, [r4, #0]
 80029c6:	7019      	strb	r1, [r3, #0]
 80029c8:	e7c5      	b.n	8002956 <_puts_r+0x42>
 80029ca:	4622      	mov	r2, r4
 80029cc:	4628      	mov	r0, r5
 80029ce:	f000 f817 	bl	8002a00 <__swbuf_r>
 80029d2:	3001      	adds	r0, #1
 80029d4:	d1bf      	bne.n	8002956 <_puts_r+0x42>
 80029d6:	e7df      	b.n	8002998 <_puts_r+0x84>
 80029d8:	250a      	movs	r5, #10
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	6022      	str	r2, [r4, #0]
 80029e0:	701d      	strb	r5, [r3, #0]
 80029e2:	e7db      	b.n	800299c <_puts_r+0x88>
 80029e4:	08003964 	.word	0x08003964
 80029e8:	08003984 	.word	0x08003984
 80029ec:	08003944 	.word	0x08003944

080029f0 <puts>:
 80029f0:	4b02      	ldr	r3, [pc, #8]	; (80029fc <puts+0xc>)
 80029f2:	4601      	mov	r1, r0
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	f7ff bf8d 	b.w	8002914 <_puts_r>
 80029fa:	bf00      	nop
 80029fc:	2000000c 	.word	0x2000000c

08002a00 <__swbuf_r>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	460e      	mov	r6, r1
 8002a04:	4614      	mov	r4, r2
 8002a06:	4605      	mov	r5, r0
 8002a08:	b118      	cbz	r0, 8002a12 <__swbuf_r+0x12>
 8002a0a:	6983      	ldr	r3, [r0, #24]
 8002a0c:	b90b      	cbnz	r3, 8002a12 <__swbuf_r+0x12>
 8002a0e:	f000 f9d1 	bl	8002db4 <__sinit>
 8002a12:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <__swbuf_r+0x98>)
 8002a14:	429c      	cmp	r4, r3
 8002a16:	d12b      	bne.n	8002a70 <__swbuf_r+0x70>
 8002a18:	686c      	ldr	r4, [r5, #4]
 8002a1a:	69a3      	ldr	r3, [r4, #24]
 8002a1c:	60a3      	str	r3, [r4, #8]
 8002a1e:	89a3      	ldrh	r3, [r4, #12]
 8002a20:	071a      	lsls	r2, r3, #28
 8002a22:	d52f      	bpl.n	8002a84 <__swbuf_r+0x84>
 8002a24:	6923      	ldr	r3, [r4, #16]
 8002a26:	b36b      	cbz	r3, 8002a84 <__swbuf_r+0x84>
 8002a28:	6923      	ldr	r3, [r4, #16]
 8002a2a:	6820      	ldr	r0, [r4, #0]
 8002a2c:	b2f6      	uxtb	r6, r6
 8002a2e:	1ac0      	subs	r0, r0, r3
 8002a30:	6963      	ldr	r3, [r4, #20]
 8002a32:	4637      	mov	r7, r6
 8002a34:	4283      	cmp	r3, r0
 8002a36:	dc04      	bgt.n	8002a42 <__swbuf_r+0x42>
 8002a38:	4621      	mov	r1, r4
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	f000 f926 	bl	8002c8c <_fflush_r>
 8002a40:	bb30      	cbnz	r0, 8002a90 <__swbuf_r+0x90>
 8002a42:	68a3      	ldr	r3, [r4, #8]
 8002a44:	3001      	adds	r0, #1
 8002a46:	3b01      	subs	r3, #1
 8002a48:	60a3      	str	r3, [r4, #8]
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	6022      	str	r2, [r4, #0]
 8002a50:	701e      	strb	r6, [r3, #0]
 8002a52:	6963      	ldr	r3, [r4, #20]
 8002a54:	4283      	cmp	r3, r0
 8002a56:	d004      	beq.n	8002a62 <__swbuf_r+0x62>
 8002a58:	89a3      	ldrh	r3, [r4, #12]
 8002a5a:	07db      	lsls	r3, r3, #31
 8002a5c:	d506      	bpl.n	8002a6c <__swbuf_r+0x6c>
 8002a5e:	2e0a      	cmp	r6, #10
 8002a60:	d104      	bne.n	8002a6c <__swbuf_r+0x6c>
 8002a62:	4621      	mov	r1, r4
 8002a64:	4628      	mov	r0, r5
 8002a66:	f000 f911 	bl	8002c8c <_fflush_r>
 8002a6a:	b988      	cbnz	r0, 8002a90 <__swbuf_r+0x90>
 8002a6c:	4638      	mov	r0, r7
 8002a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <__swbuf_r+0x9c>)
 8002a72:	429c      	cmp	r4, r3
 8002a74:	d101      	bne.n	8002a7a <__swbuf_r+0x7a>
 8002a76:	68ac      	ldr	r4, [r5, #8]
 8002a78:	e7cf      	b.n	8002a1a <__swbuf_r+0x1a>
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <__swbuf_r+0xa0>)
 8002a7c:	429c      	cmp	r4, r3
 8002a7e:	bf08      	it	eq
 8002a80:	68ec      	ldreq	r4, [r5, #12]
 8002a82:	e7ca      	b.n	8002a1a <__swbuf_r+0x1a>
 8002a84:	4621      	mov	r1, r4
 8002a86:	4628      	mov	r0, r5
 8002a88:	f000 f80c 	bl	8002aa4 <__swsetup_r>
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d0cb      	beq.n	8002a28 <__swbuf_r+0x28>
 8002a90:	f04f 37ff 	mov.w	r7, #4294967295
 8002a94:	e7ea      	b.n	8002a6c <__swbuf_r+0x6c>
 8002a96:	bf00      	nop
 8002a98:	08003964 	.word	0x08003964
 8002a9c:	08003984 	.word	0x08003984
 8002aa0:	08003944 	.word	0x08003944

08002aa4 <__swsetup_r>:
 8002aa4:	4b32      	ldr	r3, [pc, #200]	; (8002b70 <__swsetup_r+0xcc>)
 8002aa6:	b570      	push	{r4, r5, r6, lr}
 8002aa8:	681d      	ldr	r5, [r3, #0]
 8002aaa:	4606      	mov	r6, r0
 8002aac:	460c      	mov	r4, r1
 8002aae:	b125      	cbz	r5, 8002aba <__swsetup_r+0x16>
 8002ab0:	69ab      	ldr	r3, [r5, #24]
 8002ab2:	b913      	cbnz	r3, 8002aba <__swsetup_r+0x16>
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	f000 f97d 	bl	8002db4 <__sinit>
 8002aba:	4b2e      	ldr	r3, [pc, #184]	; (8002b74 <__swsetup_r+0xd0>)
 8002abc:	429c      	cmp	r4, r3
 8002abe:	d10f      	bne.n	8002ae0 <__swsetup_r+0x3c>
 8002ac0:	686c      	ldr	r4, [r5, #4]
 8002ac2:	89a3      	ldrh	r3, [r4, #12]
 8002ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ac8:	0719      	lsls	r1, r3, #28
 8002aca:	d42c      	bmi.n	8002b26 <__swsetup_r+0x82>
 8002acc:	06dd      	lsls	r5, r3, #27
 8002ace:	d411      	bmi.n	8002af4 <__swsetup_r+0x50>
 8002ad0:	2309      	movs	r3, #9
 8002ad2:	6033      	str	r3, [r6, #0]
 8002ad4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	81a3      	strh	r3, [r4, #12]
 8002ade:	e03e      	b.n	8002b5e <__swsetup_r+0xba>
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <__swsetup_r+0xd4>)
 8002ae2:	429c      	cmp	r4, r3
 8002ae4:	d101      	bne.n	8002aea <__swsetup_r+0x46>
 8002ae6:	68ac      	ldr	r4, [r5, #8]
 8002ae8:	e7eb      	b.n	8002ac2 <__swsetup_r+0x1e>
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <__swsetup_r+0xd8>)
 8002aec:	429c      	cmp	r4, r3
 8002aee:	bf08      	it	eq
 8002af0:	68ec      	ldreq	r4, [r5, #12]
 8002af2:	e7e6      	b.n	8002ac2 <__swsetup_r+0x1e>
 8002af4:	0758      	lsls	r0, r3, #29
 8002af6:	d512      	bpl.n	8002b1e <__swsetup_r+0x7a>
 8002af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002afa:	b141      	cbz	r1, 8002b0e <__swsetup_r+0x6a>
 8002afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b00:	4299      	cmp	r1, r3
 8002b02:	d002      	beq.n	8002b0a <__swsetup_r+0x66>
 8002b04:	4630      	mov	r0, r6
 8002b06:	f000 fa59 	bl	8002fbc <_free_r>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8002b0e:	89a3      	ldrh	r3, [r4, #12]
 8002b10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b14:	81a3      	strh	r3, [r4, #12]
 8002b16:	2300      	movs	r3, #0
 8002b18:	6063      	str	r3, [r4, #4]
 8002b1a:	6923      	ldr	r3, [r4, #16]
 8002b1c:	6023      	str	r3, [r4, #0]
 8002b1e:	89a3      	ldrh	r3, [r4, #12]
 8002b20:	f043 0308 	orr.w	r3, r3, #8
 8002b24:	81a3      	strh	r3, [r4, #12]
 8002b26:	6923      	ldr	r3, [r4, #16]
 8002b28:	b94b      	cbnz	r3, 8002b3e <__swsetup_r+0x9a>
 8002b2a:	89a3      	ldrh	r3, [r4, #12]
 8002b2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b34:	d003      	beq.n	8002b3e <__swsetup_r+0x9a>
 8002b36:	4621      	mov	r1, r4
 8002b38:	4630      	mov	r0, r6
 8002b3a:	f000 f9ff 	bl	8002f3c <__smakebuf_r>
 8002b3e:	89a0      	ldrh	r0, [r4, #12]
 8002b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b44:	f010 0301 	ands.w	r3, r0, #1
 8002b48:	d00a      	beq.n	8002b60 <__swsetup_r+0xbc>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60a3      	str	r3, [r4, #8]
 8002b4e:	6963      	ldr	r3, [r4, #20]
 8002b50:	425b      	negs	r3, r3
 8002b52:	61a3      	str	r3, [r4, #24]
 8002b54:	6923      	ldr	r3, [r4, #16]
 8002b56:	b943      	cbnz	r3, 8002b6a <__swsetup_r+0xc6>
 8002b58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b5c:	d1ba      	bne.n	8002ad4 <__swsetup_r+0x30>
 8002b5e:	bd70      	pop	{r4, r5, r6, pc}
 8002b60:	0781      	lsls	r1, r0, #30
 8002b62:	bf58      	it	pl
 8002b64:	6963      	ldrpl	r3, [r4, #20]
 8002b66:	60a3      	str	r3, [r4, #8]
 8002b68:	e7f4      	b.n	8002b54 <__swsetup_r+0xb0>
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	e7f7      	b.n	8002b5e <__swsetup_r+0xba>
 8002b6e:	bf00      	nop
 8002b70:	2000000c 	.word	0x2000000c
 8002b74:	08003964 	.word	0x08003964
 8002b78:	08003984 	.word	0x08003984
 8002b7c:	08003944 	.word	0x08003944

08002b80 <__sflush_r>:
 8002b80:	898a      	ldrh	r2, [r1, #12]
 8002b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b86:	4605      	mov	r5, r0
 8002b88:	0710      	lsls	r0, r2, #28
 8002b8a:	460c      	mov	r4, r1
 8002b8c:	d458      	bmi.n	8002c40 <__sflush_r+0xc0>
 8002b8e:	684b      	ldr	r3, [r1, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	dc05      	bgt.n	8002ba0 <__sflush_r+0x20>
 8002b94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	dc02      	bgt.n	8002ba0 <__sflush_r+0x20>
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ba2:	2e00      	cmp	r6, #0
 8002ba4:	d0f9      	beq.n	8002b9a <__sflush_r+0x1a>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bac:	682f      	ldr	r7, [r5, #0]
 8002bae:	602b      	str	r3, [r5, #0]
 8002bb0:	d032      	beq.n	8002c18 <__sflush_r+0x98>
 8002bb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bb4:	89a3      	ldrh	r3, [r4, #12]
 8002bb6:	075a      	lsls	r2, r3, #29
 8002bb8:	d505      	bpl.n	8002bc6 <__sflush_r+0x46>
 8002bba:	6863      	ldr	r3, [r4, #4]
 8002bbc:	1ac0      	subs	r0, r0, r3
 8002bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bc0:	b10b      	cbz	r3, 8002bc6 <__sflush_r+0x46>
 8002bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bc4:	1ac0      	subs	r0, r0, r3
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bcc:	4628      	mov	r0, r5
 8002bce:	6a21      	ldr	r1, [r4, #32]
 8002bd0:	47b0      	blx	r6
 8002bd2:	1c43      	adds	r3, r0, #1
 8002bd4:	89a3      	ldrh	r3, [r4, #12]
 8002bd6:	d106      	bne.n	8002be6 <__sflush_r+0x66>
 8002bd8:	6829      	ldr	r1, [r5, #0]
 8002bda:	291d      	cmp	r1, #29
 8002bdc:	d82c      	bhi.n	8002c38 <__sflush_r+0xb8>
 8002bde:	4a2a      	ldr	r2, [pc, #168]	; (8002c88 <__sflush_r+0x108>)
 8002be0:	40ca      	lsrs	r2, r1
 8002be2:	07d6      	lsls	r6, r2, #31
 8002be4:	d528      	bpl.n	8002c38 <__sflush_r+0xb8>
 8002be6:	2200      	movs	r2, #0
 8002be8:	6062      	str	r2, [r4, #4]
 8002bea:	6922      	ldr	r2, [r4, #16]
 8002bec:	04d9      	lsls	r1, r3, #19
 8002bee:	6022      	str	r2, [r4, #0]
 8002bf0:	d504      	bpl.n	8002bfc <__sflush_r+0x7c>
 8002bf2:	1c42      	adds	r2, r0, #1
 8002bf4:	d101      	bne.n	8002bfa <__sflush_r+0x7a>
 8002bf6:	682b      	ldr	r3, [r5, #0]
 8002bf8:	b903      	cbnz	r3, 8002bfc <__sflush_r+0x7c>
 8002bfa:	6560      	str	r0, [r4, #84]	; 0x54
 8002bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bfe:	602f      	str	r7, [r5, #0]
 8002c00:	2900      	cmp	r1, #0
 8002c02:	d0ca      	beq.n	8002b9a <__sflush_r+0x1a>
 8002c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c08:	4299      	cmp	r1, r3
 8002c0a:	d002      	beq.n	8002c12 <__sflush_r+0x92>
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	f000 f9d5 	bl	8002fbc <_free_r>
 8002c12:	2000      	movs	r0, #0
 8002c14:	6360      	str	r0, [r4, #52]	; 0x34
 8002c16:	e7c1      	b.n	8002b9c <__sflush_r+0x1c>
 8002c18:	6a21      	ldr	r1, [r4, #32]
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	47b0      	blx	r6
 8002c20:	1c41      	adds	r1, r0, #1
 8002c22:	d1c7      	bne.n	8002bb4 <__sflush_r+0x34>
 8002c24:	682b      	ldr	r3, [r5, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0c4      	beq.n	8002bb4 <__sflush_r+0x34>
 8002c2a:	2b1d      	cmp	r3, #29
 8002c2c:	d001      	beq.n	8002c32 <__sflush_r+0xb2>
 8002c2e:	2b16      	cmp	r3, #22
 8002c30:	d101      	bne.n	8002c36 <__sflush_r+0xb6>
 8002c32:	602f      	str	r7, [r5, #0]
 8002c34:	e7b1      	b.n	8002b9a <__sflush_r+0x1a>
 8002c36:	89a3      	ldrh	r3, [r4, #12]
 8002c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c3c:	81a3      	strh	r3, [r4, #12]
 8002c3e:	e7ad      	b.n	8002b9c <__sflush_r+0x1c>
 8002c40:	690f      	ldr	r7, [r1, #16]
 8002c42:	2f00      	cmp	r7, #0
 8002c44:	d0a9      	beq.n	8002b9a <__sflush_r+0x1a>
 8002c46:	0793      	lsls	r3, r2, #30
 8002c48:	bf18      	it	ne
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	680e      	ldr	r6, [r1, #0]
 8002c4e:	bf08      	it	eq
 8002c50:	694b      	ldreq	r3, [r1, #20]
 8002c52:	eba6 0807 	sub.w	r8, r6, r7
 8002c56:	600f      	str	r7, [r1, #0]
 8002c58:	608b      	str	r3, [r1, #8]
 8002c5a:	f1b8 0f00 	cmp.w	r8, #0
 8002c5e:	dd9c      	ble.n	8002b9a <__sflush_r+0x1a>
 8002c60:	4643      	mov	r3, r8
 8002c62:	463a      	mov	r2, r7
 8002c64:	4628      	mov	r0, r5
 8002c66:	6a21      	ldr	r1, [r4, #32]
 8002c68:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c6a:	47b0      	blx	r6
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	dc06      	bgt.n	8002c7e <__sflush_r+0xfe>
 8002c70:	89a3      	ldrh	r3, [r4, #12]
 8002c72:	f04f 30ff 	mov.w	r0, #4294967295
 8002c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c7a:	81a3      	strh	r3, [r4, #12]
 8002c7c:	e78e      	b.n	8002b9c <__sflush_r+0x1c>
 8002c7e:	4407      	add	r7, r0
 8002c80:	eba8 0800 	sub.w	r8, r8, r0
 8002c84:	e7e9      	b.n	8002c5a <__sflush_r+0xda>
 8002c86:	bf00      	nop
 8002c88:	20400001 	.word	0x20400001

08002c8c <_fflush_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	690b      	ldr	r3, [r1, #16]
 8002c90:	4605      	mov	r5, r0
 8002c92:	460c      	mov	r4, r1
 8002c94:	b913      	cbnz	r3, 8002c9c <_fflush_r+0x10>
 8002c96:	2500      	movs	r5, #0
 8002c98:	4628      	mov	r0, r5
 8002c9a:	bd38      	pop	{r3, r4, r5, pc}
 8002c9c:	b118      	cbz	r0, 8002ca6 <_fflush_r+0x1a>
 8002c9e:	6983      	ldr	r3, [r0, #24]
 8002ca0:	b90b      	cbnz	r3, 8002ca6 <_fflush_r+0x1a>
 8002ca2:	f000 f887 	bl	8002db4 <__sinit>
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <_fflush_r+0x6c>)
 8002ca8:	429c      	cmp	r4, r3
 8002caa:	d11b      	bne.n	8002ce4 <_fflush_r+0x58>
 8002cac:	686c      	ldr	r4, [r5, #4]
 8002cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ef      	beq.n	8002c96 <_fflush_r+0xa>
 8002cb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002cb8:	07d0      	lsls	r0, r2, #31
 8002cba:	d404      	bmi.n	8002cc6 <_fflush_r+0x3a>
 8002cbc:	0599      	lsls	r1, r3, #22
 8002cbe:	d402      	bmi.n	8002cc6 <_fflush_r+0x3a>
 8002cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cc2:	f000 f915 	bl	8002ef0 <__retarget_lock_acquire_recursive>
 8002cc6:	4628      	mov	r0, r5
 8002cc8:	4621      	mov	r1, r4
 8002cca:	f7ff ff59 	bl	8002b80 <__sflush_r>
 8002cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	07da      	lsls	r2, r3, #31
 8002cd4:	d4e0      	bmi.n	8002c98 <_fflush_r+0xc>
 8002cd6:	89a3      	ldrh	r3, [r4, #12]
 8002cd8:	059b      	lsls	r3, r3, #22
 8002cda:	d4dd      	bmi.n	8002c98 <_fflush_r+0xc>
 8002cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cde:	f000 f908 	bl	8002ef2 <__retarget_lock_release_recursive>
 8002ce2:	e7d9      	b.n	8002c98 <_fflush_r+0xc>
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <_fflush_r+0x70>)
 8002ce6:	429c      	cmp	r4, r3
 8002ce8:	d101      	bne.n	8002cee <_fflush_r+0x62>
 8002cea:	68ac      	ldr	r4, [r5, #8]
 8002cec:	e7df      	b.n	8002cae <_fflush_r+0x22>
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <_fflush_r+0x74>)
 8002cf0:	429c      	cmp	r4, r3
 8002cf2:	bf08      	it	eq
 8002cf4:	68ec      	ldreq	r4, [r5, #12]
 8002cf6:	e7da      	b.n	8002cae <_fflush_r+0x22>
 8002cf8:	08003964 	.word	0x08003964
 8002cfc:	08003984 	.word	0x08003984
 8002d00:	08003944 	.word	0x08003944

08002d04 <std>:
 8002d04:	2300      	movs	r3, #0
 8002d06:	b510      	push	{r4, lr}
 8002d08:	4604      	mov	r4, r0
 8002d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d12:	6083      	str	r3, [r0, #8]
 8002d14:	8181      	strh	r1, [r0, #12]
 8002d16:	6643      	str	r3, [r0, #100]	; 0x64
 8002d18:	81c2      	strh	r2, [r0, #14]
 8002d1a:	6183      	str	r3, [r0, #24]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	2208      	movs	r2, #8
 8002d20:	305c      	adds	r0, #92	; 0x5c
 8002d22:	f7ff fdd7 	bl	80028d4 <memset>
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <std+0x38>)
 8002d28:	6224      	str	r4, [r4, #32]
 8002d2a:	6263      	str	r3, [r4, #36]	; 0x24
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <std+0x3c>)
 8002d2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <std+0x40>)
 8002d32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d34:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <std+0x44>)
 8002d36:	6323      	str	r3, [r4, #48]	; 0x30
 8002d38:	bd10      	pop	{r4, pc}
 8002d3a:	bf00      	nop
 8002d3c:	08003705 	.word	0x08003705
 8002d40:	08003727 	.word	0x08003727
 8002d44:	0800375f 	.word	0x0800375f
 8002d48:	08003783 	.word	0x08003783

08002d4c <_cleanup_r>:
 8002d4c:	4901      	ldr	r1, [pc, #4]	; (8002d54 <_cleanup_r+0x8>)
 8002d4e:	f000 b8af 	b.w	8002eb0 <_fwalk_reent>
 8002d52:	bf00      	nop
 8002d54:	08002c8d 	.word	0x08002c8d

08002d58 <__sfmoreglue>:
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	2568      	movs	r5, #104	; 0x68
 8002d5c:	1e4a      	subs	r2, r1, #1
 8002d5e:	4355      	muls	r5, r2
 8002d60:	460e      	mov	r6, r1
 8002d62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d66:	f000 f975 	bl	8003054 <_malloc_r>
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	b140      	cbz	r0, 8002d80 <__sfmoreglue+0x28>
 8002d6e:	2100      	movs	r1, #0
 8002d70:	e9c0 1600 	strd	r1, r6, [r0]
 8002d74:	300c      	adds	r0, #12
 8002d76:	60a0      	str	r0, [r4, #8]
 8002d78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d7c:	f7ff fdaa 	bl	80028d4 <memset>
 8002d80:	4620      	mov	r0, r4
 8002d82:	bd70      	pop	{r4, r5, r6, pc}

08002d84 <__sfp_lock_acquire>:
 8002d84:	4801      	ldr	r0, [pc, #4]	; (8002d8c <__sfp_lock_acquire+0x8>)
 8002d86:	f000 b8b3 	b.w	8002ef0 <__retarget_lock_acquire_recursive>
 8002d8a:	bf00      	nop
 8002d8c:	2000016c 	.word	0x2000016c

08002d90 <__sfp_lock_release>:
 8002d90:	4801      	ldr	r0, [pc, #4]	; (8002d98 <__sfp_lock_release+0x8>)
 8002d92:	f000 b8ae 	b.w	8002ef2 <__retarget_lock_release_recursive>
 8002d96:	bf00      	nop
 8002d98:	2000016c 	.word	0x2000016c

08002d9c <__sinit_lock_acquire>:
 8002d9c:	4801      	ldr	r0, [pc, #4]	; (8002da4 <__sinit_lock_acquire+0x8>)
 8002d9e:	f000 b8a7 	b.w	8002ef0 <__retarget_lock_acquire_recursive>
 8002da2:	bf00      	nop
 8002da4:	20000167 	.word	0x20000167

08002da8 <__sinit_lock_release>:
 8002da8:	4801      	ldr	r0, [pc, #4]	; (8002db0 <__sinit_lock_release+0x8>)
 8002daa:	f000 b8a2 	b.w	8002ef2 <__retarget_lock_release_recursive>
 8002dae:	bf00      	nop
 8002db0:	20000167 	.word	0x20000167

08002db4 <__sinit>:
 8002db4:	b510      	push	{r4, lr}
 8002db6:	4604      	mov	r4, r0
 8002db8:	f7ff fff0 	bl	8002d9c <__sinit_lock_acquire>
 8002dbc:	69a3      	ldr	r3, [r4, #24]
 8002dbe:	b11b      	cbz	r3, 8002dc8 <__sinit+0x14>
 8002dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dc4:	f7ff bff0 	b.w	8002da8 <__sinit_lock_release>
 8002dc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002dcc:	6523      	str	r3, [r4, #80]	; 0x50
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <__sinit+0x68>)
 8002dd0:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <__sinit+0x6c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8002dd6:	42a3      	cmp	r3, r4
 8002dd8:	bf08      	it	eq
 8002dda:	2301      	moveq	r3, #1
 8002ddc:	4620      	mov	r0, r4
 8002dde:	bf08      	it	eq
 8002de0:	61a3      	streq	r3, [r4, #24]
 8002de2:	f000 f81f 	bl	8002e24 <__sfp>
 8002de6:	6060      	str	r0, [r4, #4]
 8002de8:	4620      	mov	r0, r4
 8002dea:	f000 f81b 	bl	8002e24 <__sfp>
 8002dee:	60a0      	str	r0, [r4, #8]
 8002df0:	4620      	mov	r0, r4
 8002df2:	f000 f817 	bl	8002e24 <__sfp>
 8002df6:	2200      	movs	r2, #0
 8002df8:	2104      	movs	r1, #4
 8002dfa:	60e0      	str	r0, [r4, #12]
 8002dfc:	6860      	ldr	r0, [r4, #4]
 8002dfe:	f7ff ff81 	bl	8002d04 <std>
 8002e02:	2201      	movs	r2, #1
 8002e04:	2109      	movs	r1, #9
 8002e06:	68a0      	ldr	r0, [r4, #8]
 8002e08:	f7ff ff7c 	bl	8002d04 <std>
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	2112      	movs	r1, #18
 8002e10:	68e0      	ldr	r0, [r4, #12]
 8002e12:	f7ff ff77 	bl	8002d04 <std>
 8002e16:	2301      	movs	r3, #1
 8002e18:	61a3      	str	r3, [r4, #24]
 8002e1a:	e7d1      	b.n	8002dc0 <__sinit+0xc>
 8002e1c:	08003940 	.word	0x08003940
 8002e20:	08002d4d 	.word	0x08002d4d

08002e24 <__sfp>:
 8002e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e26:	4607      	mov	r7, r0
 8002e28:	f7ff ffac 	bl	8002d84 <__sfp_lock_acquire>
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <__sfp+0x84>)
 8002e2e:	681e      	ldr	r6, [r3, #0]
 8002e30:	69b3      	ldr	r3, [r6, #24]
 8002e32:	b913      	cbnz	r3, 8002e3a <__sfp+0x16>
 8002e34:	4630      	mov	r0, r6
 8002e36:	f7ff ffbd 	bl	8002db4 <__sinit>
 8002e3a:	3648      	adds	r6, #72	; 0x48
 8002e3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	d503      	bpl.n	8002e4c <__sfp+0x28>
 8002e44:	6833      	ldr	r3, [r6, #0]
 8002e46:	b30b      	cbz	r3, 8002e8c <__sfp+0x68>
 8002e48:	6836      	ldr	r6, [r6, #0]
 8002e4a:	e7f7      	b.n	8002e3c <__sfp+0x18>
 8002e4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e50:	b9d5      	cbnz	r5, 8002e88 <__sfp+0x64>
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <__sfp+0x88>)
 8002e54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002e58:	60e3      	str	r3, [r4, #12]
 8002e5a:	6665      	str	r5, [r4, #100]	; 0x64
 8002e5c:	f000 f847 	bl	8002eee <__retarget_lock_init_recursive>
 8002e60:	f7ff ff96 	bl	8002d90 <__sfp_lock_release>
 8002e64:	2208      	movs	r2, #8
 8002e66:	4629      	mov	r1, r5
 8002e68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002e6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002e70:	6025      	str	r5, [r4, #0]
 8002e72:	61a5      	str	r5, [r4, #24]
 8002e74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e78:	f7ff fd2c 	bl	80028d4 <memset>
 8002e7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002e80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002e84:	4620      	mov	r0, r4
 8002e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e88:	3468      	adds	r4, #104	; 0x68
 8002e8a:	e7d9      	b.n	8002e40 <__sfp+0x1c>
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	4638      	mov	r0, r7
 8002e90:	f7ff ff62 	bl	8002d58 <__sfmoreglue>
 8002e94:	4604      	mov	r4, r0
 8002e96:	6030      	str	r0, [r6, #0]
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	d1d5      	bne.n	8002e48 <__sfp+0x24>
 8002e9c:	f7ff ff78 	bl	8002d90 <__sfp_lock_release>
 8002ea0:	230c      	movs	r3, #12
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	e7ee      	b.n	8002e84 <__sfp+0x60>
 8002ea6:	bf00      	nop
 8002ea8:	08003940 	.word	0x08003940
 8002eac:	ffff0001 	.word	0xffff0001

08002eb0 <_fwalk_reent>:
 8002eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002eb4:	4606      	mov	r6, r0
 8002eb6:	4688      	mov	r8, r1
 8002eb8:	2700      	movs	r7, #0
 8002eba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ebe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ec2:	f1b9 0901 	subs.w	r9, r9, #1
 8002ec6:	d505      	bpl.n	8002ed4 <_fwalk_reent+0x24>
 8002ec8:	6824      	ldr	r4, [r4, #0]
 8002eca:	2c00      	cmp	r4, #0
 8002ecc:	d1f7      	bne.n	8002ebe <_fwalk_reent+0xe>
 8002ece:	4638      	mov	r0, r7
 8002ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ed4:	89ab      	ldrh	r3, [r5, #12]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d907      	bls.n	8002eea <_fwalk_reent+0x3a>
 8002eda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	d003      	beq.n	8002eea <_fwalk_reent+0x3a>
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	47c0      	blx	r8
 8002ee8:	4307      	orrs	r7, r0
 8002eea:	3568      	adds	r5, #104	; 0x68
 8002eec:	e7e9      	b.n	8002ec2 <_fwalk_reent+0x12>

08002eee <__retarget_lock_init_recursive>:
 8002eee:	4770      	bx	lr

08002ef0 <__retarget_lock_acquire_recursive>:
 8002ef0:	4770      	bx	lr

08002ef2 <__retarget_lock_release_recursive>:
 8002ef2:	4770      	bx	lr

08002ef4 <__swhatbuf_r>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	460e      	mov	r6, r1
 8002ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002efc:	4614      	mov	r4, r2
 8002efe:	2900      	cmp	r1, #0
 8002f00:	461d      	mov	r5, r3
 8002f02:	b096      	sub	sp, #88	; 0x58
 8002f04:	da07      	bge.n	8002f16 <__swhatbuf_r+0x22>
 8002f06:	2300      	movs	r3, #0
 8002f08:	602b      	str	r3, [r5, #0]
 8002f0a:	89b3      	ldrh	r3, [r6, #12]
 8002f0c:	061a      	lsls	r2, r3, #24
 8002f0e:	d410      	bmi.n	8002f32 <__swhatbuf_r+0x3e>
 8002f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f14:	e00e      	b.n	8002f34 <__swhatbuf_r+0x40>
 8002f16:	466a      	mov	r2, sp
 8002f18:	f000 fc5a 	bl	80037d0 <_fstat_r>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	dbf2      	blt.n	8002f06 <__swhatbuf_r+0x12>
 8002f20:	9a01      	ldr	r2, [sp, #4]
 8002f22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f2a:	425a      	negs	r2, r3
 8002f2c:	415a      	adcs	r2, r3
 8002f2e:	602a      	str	r2, [r5, #0]
 8002f30:	e7ee      	b.n	8002f10 <__swhatbuf_r+0x1c>
 8002f32:	2340      	movs	r3, #64	; 0x40
 8002f34:	2000      	movs	r0, #0
 8002f36:	6023      	str	r3, [r4, #0]
 8002f38:	b016      	add	sp, #88	; 0x58
 8002f3a:	bd70      	pop	{r4, r5, r6, pc}

08002f3c <__smakebuf_r>:
 8002f3c:	898b      	ldrh	r3, [r1, #12]
 8002f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f40:	079d      	lsls	r5, r3, #30
 8002f42:	4606      	mov	r6, r0
 8002f44:	460c      	mov	r4, r1
 8002f46:	d507      	bpl.n	8002f58 <__smakebuf_r+0x1c>
 8002f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	6123      	str	r3, [r4, #16]
 8002f50:	2301      	movs	r3, #1
 8002f52:	6163      	str	r3, [r4, #20]
 8002f54:	b002      	add	sp, #8
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	466a      	mov	r2, sp
 8002f5a:	ab01      	add	r3, sp, #4
 8002f5c:	f7ff ffca 	bl	8002ef4 <__swhatbuf_r>
 8002f60:	9900      	ldr	r1, [sp, #0]
 8002f62:	4605      	mov	r5, r0
 8002f64:	4630      	mov	r0, r6
 8002f66:	f000 f875 	bl	8003054 <_malloc_r>
 8002f6a:	b948      	cbnz	r0, 8002f80 <__smakebuf_r+0x44>
 8002f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f70:	059a      	lsls	r2, r3, #22
 8002f72:	d4ef      	bmi.n	8002f54 <__smakebuf_r+0x18>
 8002f74:	f023 0303 	bic.w	r3, r3, #3
 8002f78:	f043 0302 	orr.w	r3, r3, #2
 8002f7c:	81a3      	strh	r3, [r4, #12]
 8002f7e:	e7e3      	b.n	8002f48 <__smakebuf_r+0xc>
 8002f80:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <__smakebuf_r+0x7c>)
 8002f82:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f84:	89a3      	ldrh	r3, [r4, #12]
 8002f86:	6020      	str	r0, [r4, #0]
 8002f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8c:	81a3      	strh	r3, [r4, #12]
 8002f8e:	9b00      	ldr	r3, [sp, #0]
 8002f90:	6120      	str	r0, [r4, #16]
 8002f92:	6163      	str	r3, [r4, #20]
 8002f94:	9b01      	ldr	r3, [sp, #4]
 8002f96:	b15b      	cbz	r3, 8002fb0 <__smakebuf_r+0x74>
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f9e:	f000 fc29 	bl	80037f4 <_isatty_r>
 8002fa2:	b128      	cbz	r0, 8002fb0 <__smakebuf_r+0x74>
 8002fa4:	89a3      	ldrh	r3, [r4, #12]
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	81a3      	strh	r3, [r4, #12]
 8002fb0:	89a0      	ldrh	r0, [r4, #12]
 8002fb2:	4305      	orrs	r5, r0
 8002fb4:	81a5      	strh	r5, [r4, #12]
 8002fb6:	e7cd      	b.n	8002f54 <__smakebuf_r+0x18>
 8002fb8:	08002d4d 	.word	0x08002d4d

08002fbc <_free_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	4605      	mov	r5, r0
 8002fc0:	2900      	cmp	r1, #0
 8002fc2:	d043      	beq.n	800304c <_free_r+0x90>
 8002fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fc8:	1f0c      	subs	r4, r1, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bfb8      	it	lt
 8002fce:	18e4      	addlt	r4, r4, r3
 8002fd0:	f000 fc40 	bl	8003854 <__malloc_lock>
 8002fd4:	4a1e      	ldr	r2, [pc, #120]	; (8003050 <_free_r+0x94>)
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	4610      	mov	r0, r2
 8002fda:	b933      	cbnz	r3, 8002fea <_free_r+0x2e>
 8002fdc:	6063      	str	r3, [r4, #4]
 8002fde:	6014      	str	r4, [r2, #0]
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fe6:	f000 bc3b 	b.w	8003860 <__malloc_unlock>
 8002fea:	42a3      	cmp	r3, r4
 8002fec:	d90a      	bls.n	8003004 <_free_r+0x48>
 8002fee:	6821      	ldr	r1, [r4, #0]
 8002ff0:	1862      	adds	r2, r4, r1
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	bf01      	itttt	eq
 8002ff6:	681a      	ldreq	r2, [r3, #0]
 8002ff8:	685b      	ldreq	r3, [r3, #4]
 8002ffa:	1852      	addeq	r2, r2, r1
 8002ffc:	6022      	streq	r2, [r4, #0]
 8002ffe:	6063      	str	r3, [r4, #4]
 8003000:	6004      	str	r4, [r0, #0]
 8003002:	e7ed      	b.n	8002fe0 <_free_r+0x24>
 8003004:	461a      	mov	r2, r3
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	b10b      	cbz	r3, 800300e <_free_r+0x52>
 800300a:	42a3      	cmp	r3, r4
 800300c:	d9fa      	bls.n	8003004 <_free_r+0x48>
 800300e:	6811      	ldr	r1, [r2, #0]
 8003010:	1850      	adds	r0, r2, r1
 8003012:	42a0      	cmp	r0, r4
 8003014:	d10b      	bne.n	800302e <_free_r+0x72>
 8003016:	6820      	ldr	r0, [r4, #0]
 8003018:	4401      	add	r1, r0
 800301a:	1850      	adds	r0, r2, r1
 800301c:	4283      	cmp	r3, r0
 800301e:	6011      	str	r1, [r2, #0]
 8003020:	d1de      	bne.n	8002fe0 <_free_r+0x24>
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4401      	add	r1, r0
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	6053      	str	r3, [r2, #4]
 800302c:	e7d8      	b.n	8002fe0 <_free_r+0x24>
 800302e:	d902      	bls.n	8003036 <_free_r+0x7a>
 8003030:	230c      	movs	r3, #12
 8003032:	602b      	str	r3, [r5, #0]
 8003034:	e7d4      	b.n	8002fe0 <_free_r+0x24>
 8003036:	6820      	ldr	r0, [r4, #0]
 8003038:	1821      	adds	r1, r4, r0
 800303a:	428b      	cmp	r3, r1
 800303c:	bf01      	itttt	eq
 800303e:	6819      	ldreq	r1, [r3, #0]
 8003040:	685b      	ldreq	r3, [r3, #4]
 8003042:	1809      	addeq	r1, r1, r0
 8003044:	6021      	streq	r1, [r4, #0]
 8003046:	6063      	str	r3, [r4, #4]
 8003048:	6054      	str	r4, [r2, #4]
 800304a:	e7c9      	b.n	8002fe0 <_free_r+0x24>
 800304c:	bd38      	pop	{r3, r4, r5, pc}
 800304e:	bf00      	nop
 8003050:	20000090 	.word	0x20000090

08003054 <_malloc_r>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	1ccd      	adds	r5, r1, #3
 8003058:	f025 0503 	bic.w	r5, r5, #3
 800305c:	3508      	adds	r5, #8
 800305e:	2d0c      	cmp	r5, #12
 8003060:	bf38      	it	cc
 8003062:	250c      	movcc	r5, #12
 8003064:	2d00      	cmp	r5, #0
 8003066:	4606      	mov	r6, r0
 8003068:	db01      	blt.n	800306e <_malloc_r+0x1a>
 800306a:	42a9      	cmp	r1, r5
 800306c:	d903      	bls.n	8003076 <_malloc_r+0x22>
 800306e:	230c      	movs	r3, #12
 8003070:	6033      	str	r3, [r6, #0]
 8003072:	2000      	movs	r0, #0
 8003074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003076:	f000 fbed 	bl	8003854 <__malloc_lock>
 800307a:	4921      	ldr	r1, [pc, #132]	; (8003100 <_malloc_r+0xac>)
 800307c:	680a      	ldr	r2, [r1, #0]
 800307e:	4614      	mov	r4, r2
 8003080:	b99c      	cbnz	r4, 80030aa <_malloc_r+0x56>
 8003082:	4f20      	ldr	r7, [pc, #128]	; (8003104 <_malloc_r+0xb0>)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b923      	cbnz	r3, 8003092 <_malloc_r+0x3e>
 8003088:	4621      	mov	r1, r4
 800308a:	4630      	mov	r0, r6
 800308c:	f000 fb2a 	bl	80036e4 <_sbrk_r>
 8003090:	6038      	str	r0, [r7, #0]
 8003092:	4629      	mov	r1, r5
 8003094:	4630      	mov	r0, r6
 8003096:	f000 fb25 	bl	80036e4 <_sbrk_r>
 800309a:	1c43      	adds	r3, r0, #1
 800309c:	d123      	bne.n	80030e6 <_malloc_r+0x92>
 800309e:	230c      	movs	r3, #12
 80030a0:	4630      	mov	r0, r6
 80030a2:	6033      	str	r3, [r6, #0]
 80030a4:	f000 fbdc 	bl	8003860 <__malloc_unlock>
 80030a8:	e7e3      	b.n	8003072 <_malloc_r+0x1e>
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	1b5b      	subs	r3, r3, r5
 80030ae:	d417      	bmi.n	80030e0 <_malloc_r+0x8c>
 80030b0:	2b0b      	cmp	r3, #11
 80030b2:	d903      	bls.n	80030bc <_malloc_r+0x68>
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	441c      	add	r4, r3
 80030b8:	6025      	str	r5, [r4, #0]
 80030ba:	e004      	b.n	80030c6 <_malloc_r+0x72>
 80030bc:	6863      	ldr	r3, [r4, #4]
 80030be:	42a2      	cmp	r2, r4
 80030c0:	bf0c      	ite	eq
 80030c2:	600b      	streq	r3, [r1, #0]
 80030c4:	6053      	strne	r3, [r2, #4]
 80030c6:	4630      	mov	r0, r6
 80030c8:	f000 fbca 	bl	8003860 <__malloc_unlock>
 80030cc:	f104 000b 	add.w	r0, r4, #11
 80030d0:	1d23      	adds	r3, r4, #4
 80030d2:	f020 0007 	bic.w	r0, r0, #7
 80030d6:	1ac2      	subs	r2, r0, r3
 80030d8:	d0cc      	beq.n	8003074 <_malloc_r+0x20>
 80030da:	1a1b      	subs	r3, r3, r0
 80030dc:	50a3      	str	r3, [r4, r2]
 80030de:	e7c9      	b.n	8003074 <_malloc_r+0x20>
 80030e0:	4622      	mov	r2, r4
 80030e2:	6864      	ldr	r4, [r4, #4]
 80030e4:	e7cc      	b.n	8003080 <_malloc_r+0x2c>
 80030e6:	1cc4      	adds	r4, r0, #3
 80030e8:	f024 0403 	bic.w	r4, r4, #3
 80030ec:	42a0      	cmp	r0, r4
 80030ee:	d0e3      	beq.n	80030b8 <_malloc_r+0x64>
 80030f0:	1a21      	subs	r1, r4, r0
 80030f2:	4630      	mov	r0, r6
 80030f4:	f000 faf6 	bl	80036e4 <_sbrk_r>
 80030f8:	3001      	adds	r0, #1
 80030fa:	d1dd      	bne.n	80030b8 <_malloc_r+0x64>
 80030fc:	e7cf      	b.n	800309e <_malloc_r+0x4a>
 80030fe:	bf00      	nop
 8003100:	20000090 	.word	0x20000090
 8003104:	20000094 	.word	0x20000094

08003108 <__sfputc_r>:
 8003108:	6893      	ldr	r3, [r2, #8]
 800310a:	b410      	push	{r4}
 800310c:	3b01      	subs	r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	6093      	str	r3, [r2, #8]
 8003112:	da07      	bge.n	8003124 <__sfputc_r+0x1c>
 8003114:	6994      	ldr	r4, [r2, #24]
 8003116:	42a3      	cmp	r3, r4
 8003118:	db01      	blt.n	800311e <__sfputc_r+0x16>
 800311a:	290a      	cmp	r1, #10
 800311c:	d102      	bne.n	8003124 <__sfputc_r+0x1c>
 800311e:	bc10      	pop	{r4}
 8003120:	f7ff bc6e 	b.w	8002a00 <__swbuf_r>
 8003124:	6813      	ldr	r3, [r2, #0]
 8003126:	1c58      	adds	r0, r3, #1
 8003128:	6010      	str	r0, [r2, #0]
 800312a:	7019      	strb	r1, [r3, #0]
 800312c:	4608      	mov	r0, r1
 800312e:	bc10      	pop	{r4}
 8003130:	4770      	bx	lr

08003132 <__sfputs_r>:
 8003132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003134:	4606      	mov	r6, r0
 8003136:	460f      	mov	r7, r1
 8003138:	4614      	mov	r4, r2
 800313a:	18d5      	adds	r5, r2, r3
 800313c:	42ac      	cmp	r4, r5
 800313e:	d101      	bne.n	8003144 <__sfputs_r+0x12>
 8003140:	2000      	movs	r0, #0
 8003142:	e007      	b.n	8003154 <__sfputs_r+0x22>
 8003144:	463a      	mov	r2, r7
 8003146:	4630      	mov	r0, r6
 8003148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800314c:	f7ff ffdc 	bl	8003108 <__sfputc_r>
 8003150:	1c43      	adds	r3, r0, #1
 8003152:	d1f3      	bne.n	800313c <__sfputs_r+0xa>
 8003154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003158 <_vfiprintf_r>:
 8003158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315c:	460d      	mov	r5, r1
 800315e:	4614      	mov	r4, r2
 8003160:	4698      	mov	r8, r3
 8003162:	4606      	mov	r6, r0
 8003164:	b09d      	sub	sp, #116	; 0x74
 8003166:	b118      	cbz	r0, 8003170 <_vfiprintf_r+0x18>
 8003168:	6983      	ldr	r3, [r0, #24]
 800316a:	b90b      	cbnz	r3, 8003170 <_vfiprintf_r+0x18>
 800316c:	f7ff fe22 	bl	8002db4 <__sinit>
 8003170:	4b89      	ldr	r3, [pc, #548]	; (8003398 <_vfiprintf_r+0x240>)
 8003172:	429d      	cmp	r5, r3
 8003174:	d11b      	bne.n	80031ae <_vfiprintf_r+0x56>
 8003176:	6875      	ldr	r5, [r6, #4]
 8003178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800317a:	07d9      	lsls	r1, r3, #31
 800317c:	d405      	bmi.n	800318a <_vfiprintf_r+0x32>
 800317e:	89ab      	ldrh	r3, [r5, #12]
 8003180:	059a      	lsls	r2, r3, #22
 8003182:	d402      	bmi.n	800318a <_vfiprintf_r+0x32>
 8003184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003186:	f7ff feb3 	bl	8002ef0 <__retarget_lock_acquire_recursive>
 800318a:	89ab      	ldrh	r3, [r5, #12]
 800318c:	071b      	lsls	r3, r3, #28
 800318e:	d501      	bpl.n	8003194 <_vfiprintf_r+0x3c>
 8003190:	692b      	ldr	r3, [r5, #16]
 8003192:	b9eb      	cbnz	r3, 80031d0 <_vfiprintf_r+0x78>
 8003194:	4629      	mov	r1, r5
 8003196:	4630      	mov	r0, r6
 8003198:	f7ff fc84 	bl	8002aa4 <__swsetup_r>
 800319c:	b1c0      	cbz	r0, 80031d0 <_vfiprintf_r+0x78>
 800319e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031a0:	07dc      	lsls	r4, r3, #31
 80031a2:	d50e      	bpl.n	80031c2 <_vfiprintf_r+0x6a>
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	b01d      	add	sp, #116	; 0x74
 80031aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ae:	4b7b      	ldr	r3, [pc, #492]	; (800339c <_vfiprintf_r+0x244>)
 80031b0:	429d      	cmp	r5, r3
 80031b2:	d101      	bne.n	80031b8 <_vfiprintf_r+0x60>
 80031b4:	68b5      	ldr	r5, [r6, #8]
 80031b6:	e7df      	b.n	8003178 <_vfiprintf_r+0x20>
 80031b8:	4b79      	ldr	r3, [pc, #484]	; (80033a0 <_vfiprintf_r+0x248>)
 80031ba:	429d      	cmp	r5, r3
 80031bc:	bf08      	it	eq
 80031be:	68f5      	ldreq	r5, [r6, #12]
 80031c0:	e7da      	b.n	8003178 <_vfiprintf_r+0x20>
 80031c2:	89ab      	ldrh	r3, [r5, #12]
 80031c4:	0598      	lsls	r0, r3, #22
 80031c6:	d4ed      	bmi.n	80031a4 <_vfiprintf_r+0x4c>
 80031c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031ca:	f7ff fe92 	bl	8002ef2 <__retarget_lock_release_recursive>
 80031ce:	e7e9      	b.n	80031a4 <_vfiprintf_r+0x4c>
 80031d0:	2300      	movs	r3, #0
 80031d2:	9309      	str	r3, [sp, #36]	; 0x24
 80031d4:	2320      	movs	r3, #32
 80031d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031da:	2330      	movs	r3, #48	; 0x30
 80031dc:	f04f 0901 	mov.w	r9, #1
 80031e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80031e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80033a4 <_vfiprintf_r+0x24c>
 80031e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031ec:	4623      	mov	r3, r4
 80031ee:	469a      	mov	sl, r3
 80031f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031f4:	b10a      	cbz	r2, 80031fa <_vfiprintf_r+0xa2>
 80031f6:	2a25      	cmp	r2, #37	; 0x25
 80031f8:	d1f9      	bne.n	80031ee <_vfiprintf_r+0x96>
 80031fa:	ebba 0b04 	subs.w	fp, sl, r4
 80031fe:	d00b      	beq.n	8003218 <_vfiprintf_r+0xc0>
 8003200:	465b      	mov	r3, fp
 8003202:	4622      	mov	r2, r4
 8003204:	4629      	mov	r1, r5
 8003206:	4630      	mov	r0, r6
 8003208:	f7ff ff93 	bl	8003132 <__sfputs_r>
 800320c:	3001      	adds	r0, #1
 800320e:	f000 80aa 	beq.w	8003366 <_vfiprintf_r+0x20e>
 8003212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003214:	445a      	add	r2, fp
 8003216:	9209      	str	r2, [sp, #36]	; 0x24
 8003218:	f89a 3000 	ldrb.w	r3, [sl]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80a2 	beq.w	8003366 <_vfiprintf_r+0x20e>
 8003222:	2300      	movs	r3, #0
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800322c:	f10a 0a01 	add.w	sl, sl, #1
 8003230:	9304      	str	r3, [sp, #16]
 8003232:	9307      	str	r3, [sp, #28]
 8003234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003238:	931a      	str	r3, [sp, #104]	; 0x68
 800323a:	4654      	mov	r4, sl
 800323c:	2205      	movs	r2, #5
 800323e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003242:	4858      	ldr	r0, [pc, #352]	; (80033a4 <_vfiprintf_r+0x24c>)
 8003244:	f000 faf8 	bl	8003838 <memchr>
 8003248:	9a04      	ldr	r2, [sp, #16]
 800324a:	b9d8      	cbnz	r0, 8003284 <_vfiprintf_r+0x12c>
 800324c:	06d1      	lsls	r1, r2, #27
 800324e:	bf44      	itt	mi
 8003250:	2320      	movmi	r3, #32
 8003252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003256:	0713      	lsls	r3, r2, #28
 8003258:	bf44      	itt	mi
 800325a:	232b      	movmi	r3, #43	; 0x2b
 800325c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003260:	f89a 3000 	ldrb.w	r3, [sl]
 8003264:	2b2a      	cmp	r3, #42	; 0x2a
 8003266:	d015      	beq.n	8003294 <_vfiprintf_r+0x13c>
 8003268:	4654      	mov	r4, sl
 800326a:	2000      	movs	r0, #0
 800326c:	f04f 0c0a 	mov.w	ip, #10
 8003270:	9a07      	ldr	r2, [sp, #28]
 8003272:	4621      	mov	r1, r4
 8003274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003278:	3b30      	subs	r3, #48	; 0x30
 800327a:	2b09      	cmp	r3, #9
 800327c:	d94e      	bls.n	800331c <_vfiprintf_r+0x1c4>
 800327e:	b1b0      	cbz	r0, 80032ae <_vfiprintf_r+0x156>
 8003280:	9207      	str	r2, [sp, #28]
 8003282:	e014      	b.n	80032ae <_vfiprintf_r+0x156>
 8003284:	eba0 0308 	sub.w	r3, r0, r8
 8003288:	fa09 f303 	lsl.w	r3, r9, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	46a2      	mov	sl, r4
 8003290:	9304      	str	r3, [sp, #16]
 8003292:	e7d2      	b.n	800323a <_vfiprintf_r+0xe2>
 8003294:	9b03      	ldr	r3, [sp, #12]
 8003296:	1d19      	adds	r1, r3, #4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	9103      	str	r1, [sp, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	bfbb      	ittet	lt
 80032a0:	425b      	neglt	r3, r3
 80032a2:	f042 0202 	orrlt.w	r2, r2, #2
 80032a6:	9307      	strge	r3, [sp, #28]
 80032a8:	9307      	strlt	r3, [sp, #28]
 80032aa:	bfb8      	it	lt
 80032ac:	9204      	strlt	r2, [sp, #16]
 80032ae:	7823      	ldrb	r3, [r4, #0]
 80032b0:	2b2e      	cmp	r3, #46	; 0x2e
 80032b2:	d10c      	bne.n	80032ce <_vfiprintf_r+0x176>
 80032b4:	7863      	ldrb	r3, [r4, #1]
 80032b6:	2b2a      	cmp	r3, #42	; 0x2a
 80032b8:	d135      	bne.n	8003326 <_vfiprintf_r+0x1ce>
 80032ba:	9b03      	ldr	r3, [sp, #12]
 80032bc:	3402      	adds	r4, #2
 80032be:	1d1a      	adds	r2, r3, #4
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	9203      	str	r2, [sp, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bfb8      	it	lt
 80032c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80032cc:	9305      	str	r3, [sp, #20]
 80032ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80033b4 <_vfiprintf_r+0x25c>
 80032d2:	2203      	movs	r2, #3
 80032d4:	4650      	mov	r0, sl
 80032d6:	7821      	ldrb	r1, [r4, #0]
 80032d8:	f000 faae 	bl	8003838 <memchr>
 80032dc:	b140      	cbz	r0, 80032f0 <_vfiprintf_r+0x198>
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	eba0 000a 	sub.w	r0, r0, sl
 80032e4:	fa03 f000 	lsl.w	r0, r3, r0
 80032e8:	9b04      	ldr	r3, [sp, #16]
 80032ea:	3401      	adds	r4, #1
 80032ec:	4303      	orrs	r3, r0
 80032ee:	9304      	str	r3, [sp, #16]
 80032f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032f4:	2206      	movs	r2, #6
 80032f6:	482c      	ldr	r0, [pc, #176]	; (80033a8 <_vfiprintf_r+0x250>)
 80032f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032fc:	f000 fa9c 	bl	8003838 <memchr>
 8003300:	2800      	cmp	r0, #0
 8003302:	d03f      	beq.n	8003384 <_vfiprintf_r+0x22c>
 8003304:	4b29      	ldr	r3, [pc, #164]	; (80033ac <_vfiprintf_r+0x254>)
 8003306:	bb1b      	cbnz	r3, 8003350 <_vfiprintf_r+0x1f8>
 8003308:	9b03      	ldr	r3, [sp, #12]
 800330a:	3307      	adds	r3, #7
 800330c:	f023 0307 	bic.w	r3, r3, #7
 8003310:	3308      	adds	r3, #8
 8003312:	9303      	str	r3, [sp, #12]
 8003314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003316:	443b      	add	r3, r7
 8003318:	9309      	str	r3, [sp, #36]	; 0x24
 800331a:	e767      	b.n	80031ec <_vfiprintf_r+0x94>
 800331c:	460c      	mov	r4, r1
 800331e:	2001      	movs	r0, #1
 8003320:	fb0c 3202 	mla	r2, ip, r2, r3
 8003324:	e7a5      	b.n	8003272 <_vfiprintf_r+0x11a>
 8003326:	2300      	movs	r3, #0
 8003328:	f04f 0c0a 	mov.w	ip, #10
 800332c:	4619      	mov	r1, r3
 800332e:	3401      	adds	r4, #1
 8003330:	9305      	str	r3, [sp, #20]
 8003332:	4620      	mov	r0, r4
 8003334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003338:	3a30      	subs	r2, #48	; 0x30
 800333a:	2a09      	cmp	r2, #9
 800333c:	d903      	bls.n	8003346 <_vfiprintf_r+0x1ee>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0c5      	beq.n	80032ce <_vfiprintf_r+0x176>
 8003342:	9105      	str	r1, [sp, #20]
 8003344:	e7c3      	b.n	80032ce <_vfiprintf_r+0x176>
 8003346:	4604      	mov	r4, r0
 8003348:	2301      	movs	r3, #1
 800334a:	fb0c 2101 	mla	r1, ip, r1, r2
 800334e:	e7f0      	b.n	8003332 <_vfiprintf_r+0x1da>
 8003350:	ab03      	add	r3, sp, #12
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	462a      	mov	r2, r5
 8003356:	4630      	mov	r0, r6
 8003358:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <_vfiprintf_r+0x258>)
 800335a:	a904      	add	r1, sp, #16
 800335c:	f3af 8000 	nop.w
 8003360:	4607      	mov	r7, r0
 8003362:	1c78      	adds	r0, r7, #1
 8003364:	d1d6      	bne.n	8003314 <_vfiprintf_r+0x1bc>
 8003366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003368:	07d9      	lsls	r1, r3, #31
 800336a:	d405      	bmi.n	8003378 <_vfiprintf_r+0x220>
 800336c:	89ab      	ldrh	r3, [r5, #12]
 800336e:	059a      	lsls	r2, r3, #22
 8003370:	d402      	bmi.n	8003378 <_vfiprintf_r+0x220>
 8003372:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003374:	f7ff fdbd 	bl	8002ef2 <__retarget_lock_release_recursive>
 8003378:	89ab      	ldrh	r3, [r5, #12]
 800337a:	065b      	lsls	r3, r3, #25
 800337c:	f53f af12 	bmi.w	80031a4 <_vfiprintf_r+0x4c>
 8003380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003382:	e711      	b.n	80031a8 <_vfiprintf_r+0x50>
 8003384:	ab03      	add	r3, sp, #12
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	462a      	mov	r2, r5
 800338a:	4630      	mov	r0, r6
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <_vfiprintf_r+0x258>)
 800338e:	a904      	add	r1, sp, #16
 8003390:	f000 f882 	bl	8003498 <_printf_i>
 8003394:	e7e4      	b.n	8003360 <_vfiprintf_r+0x208>
 8003396:	bf00      	nop
 8003398:	08003964 	.word	0x08003964
 800339c:	08003984 	.word	0x08003984
 80033a0:	08003944 	.word	0x08003944
 80033a4:	080039a4 	.word	0x080039a4
 80033a8:	080039ae 	.word	0x080039ae
 80033ac:	00000000 	.word	0x00000000
 80033b0:	08003133 	.word	0x08003133
 80033b4:	080039aa 	.word	0x080039aa

080033b8 <_printf_common>:
 80033b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033bc:	4616      	mov	r6, r2
 80033be:	4699      	mov	r9, r3
 80033c0:	688a      	ldr	r2, [r1, #8]
 80033c2:	690b      	ldr	r3, [r1, #16]
 80033c4:	4607      	mov	r7, r0
 80033c6:	4293      	cmp	r3, r2
 80033c8:	bfb8      	it	lt
 80033ca:	4613      	movlt	r3, r2
 80033cc:	6033      	str	r3, [r6, #0]
 80033ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033d2:	460c      	mov	r4, r1
 80033d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033d8:	b10a      	cbz	r2, 80033de <_printf_common+0x26>
 80033da:	3301      	adds	r3, #1
 80033dc:	6033      	str	r3, [r6, #0]
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	0699      	lsls	r1, r3, #26
 80033e2:	bf42      	ittt	mi
 80033e4:	6833      	ldrmi	r3, [r6, #0]
 80033e6:	3302      	addmi	r3, #2
 80033e8:	6033      	strmi	r3, [r6, #0]
 80033ea:	6825      	ldr	r5, [r4, #0]
 80033ec:	f015 0506 	ands.w	r5, r5, #6
 80033f0:	d106      	bne.n	8003400 <_printf_common+0x48>
 80033f2:	f104 0a19 	add.w	sl, r4, #25
 80033f6:	68e3      	ldr	r3, [r4, #12]
 80033f8:	6832      	ldr	r2, [r6, #0]
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	42ab      	cmp	r3, r5
 80033fe:	dc28      	bgt.n	8003452 <_printf_common+0x9a>
 8003400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003404:	1e13      	subs	r3, r2, #0
 8003406:	6822      	ldr	r2, [r4, #0]
 8003408:	bf18      	it	ne
 800340a:	2301      	movne	r3, #1
 800340c:	0692      	lsls	r2, r2, #26
 800340e:	d42d      	bmi.n	800346c <_printf_common+0xb4>
 8003410:	4649      	mov	r1, r9
 8003412:	4638      	mov	r0, r7
 8003414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003418:	47c0      	blx	r8
 800341a:	3001      	adds	r0, #1
 800341c:	d020      	beq.n	8003460 <_printf_common+0xa8>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	68e5      	ldr	r5, [r4, #12]
 8003422:	f003 0306 	and.w	r3, r3, #6
 8003426:	2b04      	cmp	r3, #4
 8003428:	bf18      	it	ne
 800342a:	2500      	movne	r5, #0
 800342c:	6832      	ldr	r2, [r6, #0]
 800342e:	f04f 0600 	mov.w	r6, #0
 8003432:	68a3      	ldr	r3, [r4, #8]
 8003434:	bf08      	it	eq
 8003436:	1aad      	subeq	r5, r5, r2
 8003438:	6922      	ldr	r2, [r4, #16]
 800343a:	bf08      	it	eq
 800343c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003440:	4293      	cmp	r3, r2
 8003442:	bfc4      	itt	gt
 8003444:	1a9b      	subgt	r3, r3, r2
 8003446:	18ed      	addgt	r5, r5, r3
 8003448:	341a      	adds	r4, #26
 800344a:	42b5      	cmp	r5, r6
 800344c:	d11a      	bne.n	8003484 <_printf_common+0xcc>
 800344e:	2000      	movs	r0, #0
 8003450:	e008      	b.n	8003464 <_printf_common+0xac>
 8003452:	2301      	movs	r3, #1
 8003454:	4652      	mov	r2, sl
 8003456:	4649      	mov	r1, r9
 8003458:	4638      	mov	r0, r7
 800345a:	47c0      	blx	r8
 800345c:	3001      	adds	r0, #1
 800345e:	d103      	bne.n	8003468 <_printf_common+0xb0>
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003468:	3501      	adds	r5, #1
 800346a:	e7c4      	b.n	80033f6 <_printf_common+0x3e>
 800346c:	2030      	movs	r0, #48	; 0x30
 800346e:	18e1      	adds	r1, r4, r3
 8003470:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800347a:	4422      	add	r2, r4
 800347c:	3302      	adds	r3, #2
 800347e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003482:	e7c5      	b.n	8003410 <_printf_common+0x58>
 8003484:	2301      	movs	r3, #1
 8003486:	4622      	mov	r2, r4
 8003488:	4649      	mov	r1, r9
 800348a:	4638      	mov	r0, r7
 800348c:	47c0      	blx	r8
 800348e:	3001      	adds	r0, #1
 8003490:	d0e6      	beq.n	8003460 <_printf_common+0xa8>
 8003492:	3601      	adds	r6, #1
 8003494:	e7d9      	b.n	800344a <_printf_common+0x92>
	...

08003498 <_printf_i>:
 8003498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800349c:	460c      	mov	r4, r1
 800349e:	7e27      	ldrb	r7, [r4, #24]
 80034a0:	4691      	mov	r9, r2
 80034a2:	2f78      	cmp	r7, #120	; 0x78
 80034a4:	4680      	mov	r8, r0
 80034a6:	469a      	mov	sl, r3
 80034a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80034aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034ae:	d807      	bhi.n	80034c0 <_printf_i+0x28>
 80034b0:	2f62      	cmp	r7, #98	; 0x62
 80034b2:	d80a      	bhi.n	80034ca <_printf_i+0x32>
 80034b4:	2f00      	cmp	r7, #0
 80034b6:	f000 80d9 	beq.w	800366c <_printf_i+0x1d4>
 80034ba:	2f58      	cmp	r7, #88	; 0x58
 80034bc:	f000 80a4 	beq.w	8003608 <_printf_i+0x170>
 80034c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034c8:	e03a      	b.n	8003540 <_printf_i+0xa8>
 80034ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034ce:	2b15      	cmp	r3, #21
 80034d0:	d8f6      	bhi.n	80034c0 <_printf_i+0x28>
 80034d2:	a001      	add	r0, pc, #4	; (adr r0, 80034d8 <_printf_i+0x40>)
 80034d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80034d8:	08003531 	.word	0x08003531
 80034dc:	08003545 	.word	0x08003545
 80034e0:	080034c1 	.word	0x080034c1
 80034e4:	080034c1 	.word	0x080034c1
 80034e8:	080034c1 	.word	0x080034c1
 80034ec:	080034c1 	.word	0x080034c1
 80034f0:	08003545 	.word	0x08003545
 80034f4:	080034c1 	.word	0x080034c1
 80034f8:	080034c1 	.word	0x080034c1
 80034fc:	080034c1 	.word	0x080034c1
 8003500:	080034c1 	.word	0x080034c1
 8003504:	08003653 	.word	0x08003653
 8003508:	08003575 	.word	0x08003575
 800350c:	08003635 	.word	0x08003635
 8003510:	080034c1 	.word	0x080034c1
 8003514:	080034c1 	.word	0x080034c1
 8003518:	08003675 	.word	0x08003675
 800351c:	080034c1 	.word	0x080034c1
 8003520:	08003575 	.word	0x08003575
 8003524:	080034c1 	.word	0x080034c1
 8003528:	080034c1 	.word	0x080034c1
 800352c:	0800363d 	.word	0x0800363d
 8003530:	680b      	ldr	r3, [r1, #0]
 8003532:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003536:	1d1a      	adds	r2, r3, #4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	600a      	str	r2, [r1, #0]
 800353c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003540:	2301      	movs	r3, #1
 8003542:	e0a4      	b.n	800368e <_printf_i+0x1f6>
 8003544:	6825      	ldr	r5, [r4, #0]
 8003546:	6808      	ldr	r0, [r1, #0]
 8003548:	062e      	lsls	r6, r5, #24
 800354a:	f100 0304 	add.w	r3, r0, #4
 800354e:	d50a      	bpl.n	8003566 <_printf_i+0xce>
 8003550:	6805      	ldr	r5, [r0, #0]
 8003552:	600b      	str	r3, [r1, #0]
 8003554:	2d00      	cmp	r5, #0
 8003556:	da03      	bge.n	8003560 <_printf_i+0xc8>
 8003558:	232d      	movs	r3, #45	; 0x2d
 800355a:	426d      	negs	r5, r5
 800355c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003560:	230a      	movs	r3, #10
 8003562:	485e      	ldr	r0, [pc, #376]	; (80036dc <_printf_i+0x244>)
 8003564:	e019      	b.n	800359a <_printf_i+0x102>
 8003566:	f015 0f40 	tst.w	r5, #64	; 0x40
 800356a:	6805      	ldr	r5, [r0, #0]
 800356c:	600b      	str	r3, [r1, #0]
 800356e:	bf18      	it	ne
 8003570:	b22d      	sxthne	r5, r5
 8003572:	e7ef      	b.n	8003554 <_printf_i+0xbc>
 8003574:	680b      	ldr	r3, [r1, #0]
 8003576:	6825      	ldr	r5, [r4, #0]
 8003578:	1d18      	adds	r0, r3, #4
 800357a:	6008      	str	r0, [r1, #0]
 800357c:	0628      	lsls	r0, r5, #24
 800357e:	d501      	bpl.n	8003584 <_printf_i+0xec>
 8003580:	681d      	ldr	r5, [r3, #0]
 8003582:	e002      	b.n	800358a <_printf_i+0xf2>
 8003584:	0669      	lsls	r1, r5, #25
 8003586:	d5fb      	bpl.n	8003580 <_printf_i+0xe8>
 8003588:	881d      	ldrh	r5, [r3, #0]
 800358a:	2f6f      	cmp	r7, #111	; 0x6f
 800358c:	bf0c      	ite	eq
 800358e:	2308      	moveq	r3, #8
 8003590:	230a      	movne	r3, #10
 8003592:	4852      	ldr	r0, [pc, #328]	; (80036dc <_printf_i+0x244>)
 8003594:	2100      	movs	r1, #0
 8003596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800359a:	6866      	ldr	r6, [r4, #4]
 800359c:	2e00      	cmp	r6, #0
 800359e:	bfa8      	it	ge
 80035a0:	6821      	ldrge	r1, [r4, #0]
 80035a2:	60a6      	str	r6, [r4, #8]
 80035a4:	bfa4      	itt	ge
 80035a6:	f021 0104 	bicge.w	r1, r1, #4
 80035aa:	6021      	strge	r1, [r4, #0]
 80035ac:	b90d      	cbnz	r5, 80035b2 <_printf_i+0x11a>
 80035ae:	2e00      	cmp	r6, #0
 80035b0:	d04d      	beq.n	800364e <_printf_i+0x1b6>
 80035b2:	4616      	mov	r6, r2
 80035b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80035b8:	fb03 5711 	mls	r7, r3, r1, r5
 80035bc:	5dc7      	ldrb	r7, [r0, r7]
 80035be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035c2:	462f      	mov	r7, r5
 80035c4:	42bb      	cmp	r3, r7
 80035c6:	460d      	mov	r5, r1
 80035c8:	d9f4      	bls.n	80035b4 <_printf_i+0x11c>
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d10b      	bne.n	80035e6 <_printf_i+0x14e>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	07df      	lsls	r7, r3, #31
 80035d2:	d508      	bpl.n	80035e6 <_printf_i+0x14e>
 80035d4:	6923      	ldr	r3, [r4, #16]
 80035d6:	6861      	ldr	r1, [r4, #4]
 80035d8:	4299      	cmp	r1, r3
 80035da:	bfde      	ittt	le
 80035dc:	2330      	movle	r3, #48	; 0x30
 80035de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035e6:	1b92      	subs	r2, r2, r6
 80035e8:	6122      	str	r2, [r4, #16]
 80035ea:	464b      	mov	r3, r9
 80035ec:	4621      	mov	r1, r4
 80035ee:	4640      	mov	r0, r8
 80035f0:	f8cd a000 	str.w	sl, [sp]
 80035f4:	aa03      	add	r2, sp, #12
 80035f6:	f7ff fedf 	bl	80033b8 <_printf_common>
 80035fa:	3001      	adds	r0, #1
 80035fc:	d14c      	bne.n	8003698 <_printf_i+0x200>
 80035fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003602:	b004      	add	sp, #16
 8003604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003608:	4834      	ldr	r0, [pc, #208]	; (80036dc <_printf_i+0x244>)
 800360a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800360e:	680e      	ldr	r6, [r1, #0]
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	f856 5b04 	ldr.w	r5, [r6], #4
 8003616:	061f      	lsls	r7, r3, #24
 8003618:	600e      	str	r6, [r1, #0]
 800361a:	d514      	bpl.n	8003646 <_printf_i+0x1ae>
 800361c:	07d9      	lsls	r1, r3, #31
 800361e:	bf44      	itt	mi
 8003620:	f043 0320 	orrmi.w	r3, r3, #32
 8003624:	6023      	strmi	r3, [r4, #0]
 8003626:	b91d      	cbnz	r5, 8003630 <_printf_i+0x198>
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	f023 0320 	bic.w	r3, r3, #32
 800362e:	6023      	str	r3, [r4, #0]
 8003630:	2310      	movs	r3, #16
 8003632:	e7af      	b.n	8003594 <_printf_i+0xfc>
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	f043 0320 	orr.w	r3, r3, #32
 800363a:	6023      	str	r3, [r4, #0]
 800363c:	2378      	movs	r3, #120	; 0x78
 800363e:	4828      	ldr	r0, [pc, #160]	; (80036e0 <_printf_i+0x248>)
 8003640:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003644:	e7e3      	b.n	800360e <_printf_i+0x176>
 8003646:	065e      	lsls	r6, r3, #25
 8003648:	bf48      	it	mi
 800364a:	b2ad      	uxthmi	r5, r5
 800364c:	e7e6      	b.n	800361c <_printf_i+0x184>
 800364e:	4616      	mov	r6, r2
 8003650:	e7bb      	b.n	80035ca <_printf_i+0x132>
 8003652:	680b      	ldr	r3, [r1, #0]
 8003654:	6826      	ldr	r6, [r4, #0]
 8003656:	1d1d      	adds	r5, r3, #4
 8003658:	6960      	ldr	r0, [r4, #20]
 800365a:	600d      	str	r5, [r1, #0]
 800365c:	0635      	lsls	r5, r6, #24
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	d501      	bpl.n	8003666 <_printf_i+0x1ce>
 8003662:	6018      	str	r0, [r3, #0]
 8003664:	e002      	b.n	800366c <_printf_i+0x1d4>
 8003666:	0671      	lsls	r1, r6, #25
 8003668:	d5fb      	bpl.n	8003662 <_printf_i+0x1ca>
 800366a:	8018      	strh	r0, [r3, #0]
 800366c:	2300      	movs	r3, #0
 800366e:	4616      	mov	r6, r2
 8003670:	6123      	str	r3, [r4, #16]
 8003672:	e7ba      	b.n	80035ea <_printf_i+0x152>
 8003674:	680b      	ldr	r3, [r1, #0]
 8003676:	1d1a      	adds	r2, r3, #4
 8003678:	600a      	str	r2, [r1, #0]
 800367a:	681e      	ldr	r6, [r3, #0]
 800367c:	2100      	movs	r1, #0
 800367e:	4630      	mov	r0, r6
 8003680:	6862      	ldr	r2, [r4, #4]
 8003682:	f000 f8d9 	bl	8003838 <memchr>
 8003686:	b108      	cbz	r0, 800368c <_printf_i+0x1f4>
 8003688:	1b80      	subs	r0, r0, r6
 800368a:	6060      	str	r0, [r4, #4]
 800368c:	6863      	ldr	r3, [r4, #4]
 800368e:	6123      	str	r3, [r4, #16]
 8003690:	2300      	movs	r3, #0
 8003692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003696:	e7a8      	b.n	80035ea <_printf_i+0x152>
 8003698:	4632      	mov	r2, r6
 800369a:	4649      	mov	r1, r9
 800369c:	4640      	mov	r0, r8
 800369e:	6923      	ldr	r3, [r4, #16]
 80036a0:	47d0      	blx	sl
 80036a2:	3001      	adds	r0, #1
 80036a4:	d0ab      	beq.n	80035fe <_printf_i+0x166>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	079b      	lsls	r3, r3, #30
 80036aa:	d413      	bmi.n	80036d4 <_printf_i+0x23c>
 80036ac:	68e0      	ldr	r0, [r4, #12]
 80036ae:	9b03      	ldr	r3, [sp, #12]
 80036b0:	4298      	cmp	r0, r3
 80036b2:	bfb8      	it	lt
 80036b4:	4618      	movlt	r0, r3
 80036b6:	e7a4      	b.n	8003602 <_printf_i+0x16a>
 80036b8:	2301      	movs	r3, #1
 80036ba:	4632      	mov	r2, r6
 80036bc:	4649      	mov	r1, r9
 80036be:	4640      	mov	r0, r8
 80036c0:	47d0      	blx	sl
 80036c2:	3001      	adds	r0, #1
 80036c4:	d09b      	beq.n	80035fe <_printf_i+0x166>
 80036c6:	3501      	adds	r5, #1
 80036c8:	68e3      	ldr	r3, [r4, #12]
 80036ca:	9903      	ldr	r1, [sp, #12]
 80036cc:	1a5b      	subs	r3, r3, r1
 80036ce:	42ab      	cmp	r3, r5
 80036d0:	dcf2      	bgt.n	80036b8 <_printf_i+0x220>
 80036d2:	e7eb      	b.n	80036ac <_printf_i+0x214>
 80036d4:	2500      	movs	r5, #0
 80036d6:	f104 0619 	add.w	r6, r4, #25
 80036da:	e7f5      	b.n	80036c8 <_printf_i+0x230>
 80036dc:	080039b5 	.word	0x080039b5
 80036e0:	080039c6 	.word	0x080039c6

080036e4 <_sbrk_r>:
 80036e4:	b538      	push	{r3, r4, r5, lr}
 80036e6:	2300      	movs	r3, #0
 80036e8:	4d05      	ldr	r5, [pc, #20]	; (8003700 <_sbrk_r+0x1c>)
 80036ea:	4604      	mov	r4, r0
 80036ec:	4608      	mov	r0, r1
 80036ee:	602b      	str	r3, [r5, #0]
 80036f0:	f7fd fb0c 	bl	8000d0c <_sbrk>
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	d102      	bne.n	80036fe <_sbrk_r+0x1a>
 80036f8:	682b      	ldr	r3, [r5, #0]
 80036fa:	b103      	cbz	r3, 80036fe <_sbrk_r+0x1a>
 80036fc:	6023      	str	r3, [r4, #0]
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
 8003700:	20000170 	.word	0x20000170

08003704 <__sread>:
 8003704:	b510      	push	{r4, lr}
 8003706:	460c      	mov	r4, r1
 8003708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800370c:	f000 f8ae 	bl	800386c <_read_r>
 8003710:	2800      	cmp	r0, #0
 8003712:	bfab      	itete	ge
 8003714:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003716:	89a3      	ldrhlt	r3, [r4, #12]
 8003718:	181b      	addge	r3, r3, r0
 800371a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800371e:	bfac      	ite	ge
 8003720:	6563      	strge	r3, [r4, #84]	; 0x54
 8003722:	81a3      	strhlt	r3, [r4, #12]
 8003724:	bd10      	pop	{r4, pc}

08003726 <__swrite>:
 8003726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800372a:	461f      	mov	r7, r3
 800372c:	898b      	ldrh	r3, [r1, #12]
 800372e:	4605      	mov	r5, r0
 8003730:	05db      	lsls	r3, r3, #23
 8003732:	460c      	mov	r4, r1
 8003734:	4616      	mov	r6, r2
 8003736:	d505      	bpl.n	8003744 <__swrite+0x1e>
 8003738:	2302      	movs	r3, #2
 800373a:	2200      	movs	r2, #0
 800373c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003740:	f000 f868 	bl	8003814 <_lseek_r>
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	4632      	mov	r2, r6
 8003748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800374c:	81a3      	strh	r3, [r4, #12]
 800374e:	4628      	mov	r0, r5
 8003750:	463b      	mov	r3, r7
 8003752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800375a:	f000 b817 	b.w	800378c <_write_r>

0800375e <__sseek>:
 800375e:	b510      	push	{r4, lr}
 8003760:	460c      	mov	r4, r1
 8003762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003766:	f000 f855 	bl	8003814 <_lseek_r>
 800376a:	1c43      	adds	r3, r0, #1
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	bf15      	itete	ne
 8003770:	6560      	strne	r0, [r4, #84]	; 0x54
 8003772:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003776:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800377a:	81a3      	strheq	r3, [r4, #12]
 800377c:	bf18      	it	ne
 800377e:	81a3      	strhne	r3, [r4, #12]
 8003780:	bd10      	pop	{r4, pc}

08003782 <__sclose>:
 8003782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003786:	f000 b813 	b.w	80037b0 <_close_r>
	...

0800378c <_write_r>:
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	4604      	mov	r4, r0
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	2200      	movs	r2, #0
 8003796:	4d05      	ldr	r5, [pc, #20]	; (80037ac <_write_r+0x20>)
 8003798:	602a      	str	r2, [r5, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	f7fd fa6a 	bl	8000c74 <_write>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d102      	bne.n	80037aa <_write_r+0x1e>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	b103      	cbz	r3, 80037aa <_write_r+0x1e>
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	20000170 	.word	0x20000170

080037b0 <_close_r>:
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	2300      	movs	r3, #0
 80037b4:	4d05      	ldr	r5, [pc, #20]	; (80037cc <_close_r+0x1c>)
 80037b6:	4604      	mov	r4, r0
 80037b8:	4608      	mov	r0, r1
 80037ba:	602b      	str	r3, [r5, #0]
 80037bc:	f7fd fa76 	bl	8000cac <_close>
 80037c0:	1c43      	adds	r3, r0, #1
 80037c2:	d102      	bne.n	80037ca <_close_r+0x1a>
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	b103      	cbz	r3, 80037ca <_close_r+0x1a>
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	bd38      	pop	{r3, r4, r5, pc}
 80037cc:	20000170 	.word	0x20000170

080037d0 <_fstat_r>:
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	2300      	movs	r3, #0
 80037d4:	4d06      	ldr	r5, [pc, #24]	; (80037f0 <_fstat_r+0x20>)
 80037d6:	4604      	mov	r4, r0
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	602b      	str	r3, [r5, #0]
 80037de:	f7fd fa70 	bl	8000cc2 <_fstat>
 80037e2:	1c43      	adds	r3, r0, #1
 80037e4:	d102      	bne.n	80037ec <_fstat_r+0x1c>
 80037e6:	682b      	ldr	r3, [r5, #0]
 80037e8:	b103      	cbz	r3, 80037ec <_fstat_r+0x1c>
 80037ea:	6023      	str	r3, [r4, #0]
 80037ec:	bd38      	pop	{r3, r4, r5, pc}
 80037ee:	bf00      	nop
 80037f0:	20000170 	.word	0x20000170

080037f4 <_isatty_r>:
 80037f4:	b538      	push	{r3, r4, r5, lr}
 80037f6:	2300      	movs	r3, #0
 80037f8:	4d05      	ldr	r5, [pc, #20]	; (8003810 <_isatty_r+0x1c>)
 80037fa:	4604      	mov	r4, r0
 80037fc:	4608      	mov	r0, r1
 80037fe:	602b      	str	r3, [r5, #0]
 8003800:	f7fd fa6e 	bl	8000ce0 <_isatty>
 8003804:	1c43      	adds	r3, r0, #1
 8003806:	d102      	bne.n	800380e <_isatty_r+0x1a>
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	b103      	cbz	r3, 800380e <_isatty_r+0x1a>
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	bd38      	pop	{r3, r4, r5, pc}
 8003810:	20000170 	.word	0x20000170

08003814 <_lseek_r>:
 8003814:	b538      	push	{r3, r4, r5, lr}
 8003816:	4604      	mov	r4, r0
 8003818:	4608      	mov	r0, r1
 800381a:	4611      	mov	r1, r2
 800381c:	2200      	movs	r2, #0
 800381e:	4d05      	ldr	r5, [pc, #20]	; (8003834 <_lseek_r+0x20>)
 8003820:	602a      	str	r2, [r5, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	f7fd fa66 	bl	8000cf4 <_lseek>
 8003828:	1c43      	adds	r3, r0, #1
 800382a:	d102      	bne.n	8003832 <_lseek_r+0x1e>
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	b103      	cbz	r3, 8003832 <_lseek_r+0x1e>
 8003830:	6023      	str	r3, [r4, #0]
 8003832:	bd38      	pop	{r3, r4, r5, pc}
 8003834:	20000170 	.word	0x20000170

08003838 <memchr>:
 8003838:	4603      	mov	r3, r0
 800383a:	b510      	push	{r4, lr}
 800383c:	b2c9      	uxtb	r1, r1
 800383e:	4402      	add	r2, r0
 8003840:	4293      	cmp	r3, r2
 8003842:	4618      	mov	r0, r3
 8003844:	d101      	bne.n	800384a <memchr+0x12>
 8003846:	2000      	movs	r0, #0
 8003848:	e003      	b.n	8003852 <memchr+0x1a>
 800384a:	7804      	ldrb	r4, [r0, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	428c      	cmp	r4, r1
 8003850:	d1f6      	bne.n	8003840 <memchr+0x8>
 8003852:	bd10      	pop	{r4, pc}

08003854 <__malloc_lock>:
 8003854:	4801      	ldr	r0, [pc, #4]	; (800385c <__malloc_lock+0x8>)
 8003856:	f7ff bb4b 	b.w	8002ef0 <__retarget_lock_acquire_recursive>
 800385a:	bf00      	nop
 800385c:	20000168 	.word	0x20000168

08003860 <__malloc_unlock>:
 8003860:	4801      	ldr	r0, [pc, #4]	; (8003868 <__malloc_unlock+0x8>)
 8003862:	f7ff bb46 	b.w	8002ef2 <__retarget_lock_release_recursive>
 8003866:	bf00      	nop
 8003868:	20000168 	.word	0x20000168

0800386c <_read_r>:
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	4604      	mov	r4, r0
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	2200      	movs	r2, #0
 8003876:	4d05      	ldr	r5, [pc, #20]	; (800388c <_read_r+0x20>)
 8003878:	602a      	str	r2, [r5, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	f7fd f9dd 	bl	8000c3a <_read>
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	d102      	bne.n	800388a <_read_r+0x1e>
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	b103      	cbz	r3, 800388a <_read_r+0x1e>
 8003888:	6023      	str	r3, [r4, #0]
 800388a:	bd38      	pop	{r3, r4, r5, pc}
 800388c:	20000170 	.word	0x20000170

08003890 <_init>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	bf00      	nop
 8003894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003896:	bc08      	pop	{r3}
 8003898:	469e      	mov	lr, r3
 800389a:	4770      	bx	lr

0800389c <_fini>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	bf00      	nop
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr
